#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV —Ñ–∞–π–ª–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""
import os
import sys
import csv
import json
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Any

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from app.database.models import init_database
from app.database.service import get_database_service


def parse_csv_date(date_str: str) -> datetime:
    """–ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ CSV"""
    try:
        # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–∞—Ç
        formats = [
            "%Y-%m-%d",
            "%d.%m.%Y",
            "%d/%m/%Y",
            "%Y-%m-%d %H:%M:%S",
            "%d.%m.%Y %H:%M:%S"
        ]
        
        for fmt in formats:
            try:
                return datetime.strptime(date_str, fmt)
            except ValueError:
                continue
        
        # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –ø–æ–¥–æ—à–ª–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É
        return datetime.now()
    except:
        return datetime.now()


def migrate_user_data(user_id: int, data_dir: Path) -> Dict[str, Any]:
    """–ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    print(f"üìÅ –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}...")
    
    db_service = get_database_service()
    
    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = db_service.get_or_create_user(telegram_id=user_id)
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Å—á–µ—Ç–∞ –∏–∑ accounts.json
    accounts_file = data_dir / "accounts.json"
    accounts_created = 0
    if accounts_file.exists():
        try:
            with open(accounts_file, 'r', encoding='utf-8') as f:
                accounts_data = json.load(f)
            
            for account_name, account_info in accounts_data.items():
                currency = account_info.get('currency', 'EUR')
                balance = float(account_info.get('amount', 0.0))
                
                # –°–æ–∑–¥–∞–µ–º —Å—á–µ—Ç –≤ –ë–î
                db_service.create_account(
                    user_id=user.id,
                    name=account_name,
                    currency=currency,
                    balance=balance
                )
                accounts_created += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—á–µ—Ç–æ–≤: {e}")
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ finance.csv
    transactions_created = 0
    csv_file = data_dir / "finance.csv"
    if csv_file.exists():
        try:
            with open(csv_file, 'r', encoding='utf-8') as f:
                reader = csv.DictReader(f)
                
                for row in reader:
                    # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É
                    date = parse_csv_date(row.get('date', ''))
                    
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
                    total = float(row.get('total', 0))
                    transaction_type = "income" if total > 0 else "expense"
                    
                    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
                    db_service.create_transaction(
                        user_id=user.id,
                        date=date,
                        total=abs(total),
                        currency=row.get('currency', 'EUR'),
                        category=row.get('category'),
                        merchant=row.get('merchant'),
                        payment_method=row.get('payment_method'),
                        source=row.get('source'),
                        notes=row.get('notes'),
                        transaction_type=transaction_type
                    )
                    transactions_created += 1
                    
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {e}")
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø—Ä–∞–≤–∏–ª–∞ –∏–∑ rules.json
    rules_created = 0
    rules_file = data_dir / "rules.json"
    if rules_file.exists():
        try:
            with open(rules_file, 'r', encoding='utf-8') as f:
                rules_data = json.load(f)
            
            for rule in rules_data:
                db_service.create_rule(
                    user_id=user.id,
                    category=rule.get('category', ''),
                    match_conditions=rule.get('match', {})
                )
                rules_created += 1
                
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø—Ä–∞–≤–∏–ª: {e}")
    
    return {
        "user_id": user_id,
        "accounts_created": accounts_created,
        "transactions_created": transactions_created,
        "rules_created": rules_created
    }


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    init_database()
    print("‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    data_dir = Path("data")
    if not data_dir.exists():
        print("‚ùå –ü–∞–ø–∫–∞ data –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    user_dirs = [d for d in data_dir.iterdir() if d.is_dir() and d.name.isdigit()]
    
    if not user_dirs:
        print("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ data")
        return
    
    print(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(user_dirs)}")
    
    # –ú–∏–≥—Ä–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    total_stats = {
        "users_migrated": 0,
        "accounts_created": 0,
        "transactions_created": 0,
        "rules_created": 0
    }
    
    for user_dir in user_dirs:
        user_id = int(user_dir.name)
        try:
            stats = migrate_user_data(user_id, user_dir)
            total_stats["users_migrated"] += 1
            total_stats["accounts_created"] += stats["accounts_created"]
            total_stats["transactions_created"] += stats["transactions_created"]
            total_stats["rules_created"] += stats["rules_created"]
            
            print(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id}: {stats['accounts_created']} —Å—á–µ—Ç–æ–≤, "
                  f"{stats['transactions_created']} —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π, {stats['rules_created']} –ø—Ä–∞–≤–∏–ª")
                  
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {e}")
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print(f"üìä –ò—Ç–æ–≥–æ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ:")
    print(f"   üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {total_stats['users_migrated']}")
    print(f"   üè¶ –°—á–µ—Ç–æ–≤: {total_stats['accounts_created']}")
    print(f"   üí∞ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏–π: {total_stats['transactions_created']}")
    print(f"   üß© –ü—Ä–∞–≤–∏–ª: {total_stats['rules_created']}")
    
    print("\nüí° –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –≤–º–µ—Å—Ç–æ —Ñ–∞–π–ª–æ–≤!")


if __name__ == "__main__":
    main()
