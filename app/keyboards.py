# app/keyboards.py
from telegram import ReplyKeyboardMarkup
from app.categories import get_categories_list, format_category_for_display
from datetime import date, timedelta

def reply_menu_keyboard() -> ReplyKeyboardMarkup:
    # –ë–µ–∑ –ø—É–Ω–∫—Ç–∞ ¬´–°–∫—Ä—ã—Ç—å –º–µ–Ω—é¬ª
    return ReplyKeyboardMarkup(
        [
            ["üõç –†–∞—Å—Ö–æ–¥—ã", "üí∞ –î–æ—Ö–æ–¥—ã"],
            ["üì§ –≠–∫—Å–ø–æ—Ä—Ç", "üíº –ë–∞–ª–∞–Ω—Å"],
        ],
        resize_keyboard=True,
        one_time_keyboard=False,
        selective=False,
    )

def purchases_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üìä –°–µ–≥–æ–¥–Ω—è", "üóì –ù–µ–¥–µ–ª—è", "üìÖ –ú–µ—Å—è—Ü"],
            ["üßæ –ü–æ—Å–ª–µ–¥–Ω—è—è", "‚Ü©Ô∏è Undo", "‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω—é—é"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ],
        resize_keyboard=True
    )

def income_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üìä –°–µ–≥–æ–¥–Ω—è", "üóì –ù–µ–¥–µ–ª—è", "üìÖ –ú–µ—Å—è—Ü"],
            ["üí∞ –ü–æ—Å–ª–µ–¥–Ω–∏–π", "‚Ü©Ô∏è Undo", "‚úèÔ∏è –ü—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–π"],
            ["‚ûï –î–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"],
        ],
        resize_keyboard=True
    )

def balance_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [
            ["üíº –í—Å–µ —Å—á–µ—Ç–∞", "‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç"],
            ["‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", "üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç"],
            ["üí± –û–±–º–µ–Ω –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"],
            ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

def edit_last_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["–î–∞—Ç–∞", "–ú–∞–≥–∞–∑–∏–Ω"],
         ["–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
         ["–°–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã"],
         ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def edit_income_menu_kb() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        [["–î–∞—Ç–∞", "–ò—Å—Ç–æ—á–Ω–∏–∫"],
         ["–°—É–º–º–∞", "–ö–∞—Ç–µ–≥–æ—Ä–∏—è"],
         ["–°—á—ë—Ç"],
         ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def accounts_kb(names, *, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    rows = [[n] for n in names]
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("–û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def categories_kb(*, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö"""
    categories = get_categories_list()
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    rows = []
    for i in range(0, len(categories), 2):
        row = [format_category_for_display(categories[i])]
        if i + 1 < len(categories):
            row.append(format_category_for_display(categories[i + 1]))
        rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("–û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def date_selection_kb(*, include_back=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    today = date.today()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –¥–∞—Ç–∞–º–∏
    rows = []
    
    # –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞
    today_str = today.strftime("%d.%m.%Y")
    rows.append([f"üìÖ –°–µ–≥–æ–¥–Ω—è ({today_str})"])
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
    recent_dates = []
    for i in range(1, 8):
        d = today - timedelta(days=i)
        recent_dates.append(d.strftime("%d.%m"))
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 3 –¥–∞—Ç—ã
    for i in range(0, len(recent_dates), 3):
        row = recent_dates[i:i+3]
        rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ö–∞–ª–µ–Ω–¥–∞—Ä—å" –∏ "–ù–∞–∑–∞–¥"
    tail = ["üìÜ –ö–∞–ª–µ–Ω–¥–∞—Ä—å"]
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def calendar_kb(year: int = None, month: int = None) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    if year is None:
        year = date.today().year
    if month is None:
        month = date.today().month
    
    # –°–æ–∑–¥–∞–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å
    import calendar
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –º–µ—Å—è—Ü–µ–º –∏ –≥–æ–¥–æ–º
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    
    rows = []
    
    # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –º–µ—Å—è—Ü–∞–º
    prev_month = month - 1 if month > 1 else 12
    next_month = month + 1 if month < 12 else 1
    prev_year = year - 1 if month == 1 else year
    next_year = year + 1 if month == 12 else year
    
    nav_row = [f"‚óÄÔ∏è {month_names[prev_month-1]}", f"{month_names[month-1]} {year}", f"{month_names[next_month-1]} ‚ñ∂Ô∏è"]
    rows.append(nav_row)
    
    # –î–Ω–∏ –Ω–µ–¥–µ–ª–∏
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]
    rows.append(weekdays)
    
    # –î–Ω–∏ –º–µ—Å—è—Ü–∞
    cal = calendar.monthcalendar(year, month)
    for week in cal:
        week_row = []
        for day in week:
            if day == 0:
                week_row.append(" ")
            else:
                # –í—ã–¥–µ–ª—è–µ–º —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
                today = date.today()
                if year == today.year and month == today.month and day == today.day:
                    week_row.append(f"üî∏{day}")
                else:
                    week_row.append(str(day))
        rows.append(week_row)
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    rows.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def account_edit_menu_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞"""
    return ReplyKeyboardMarkup(
        [["üí∞ –°—É–º–º–∞"], ["üí± –í–∞–ª—é—Ç–∞"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def currency_selection_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    return ReplyKeyboardMarkup(
        [["UAH", "USD", "EUR"], ["RUB", "PLN", "GBP"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def delete_confirmation_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∏—è"""
    return ReplyKeyboardMarkup(
        [["‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å"], ["‚ùå –û—Ç–º–µ–Ω–∞"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞
def income_add_amount_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –¥–æ—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], ["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def income_add_currency_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã –¥–æ—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["UAH", "USD", "EUR"], ["RUB", "PLN", "GBP"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def income_add_source_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ –¥–æ—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], ["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def income_add_category_kb(*, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–æ—Ö–æ–¥–∞"""
    from app.categories import get_income_categories_list, format_category_for_display
    categories = get_income_categories_list()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    rows = []
    for i in range(0, len(categories), 2):
        row = [format_category_for_display(categories[i])]
        if i + 1 < len(categories):
            row.append(format_category_for_display(categories[i + 1]))
        rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("‚ùå –û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def income_add_account_kb(accounts: list, *, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –¥–æ—Ö–æ–¥–∞"""
    rows = [[acc] for acc in accounts]
    
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("‚ùå –û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def transfer_amount_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], ["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def transfer_confirm_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å"], ["‚ùå –û—Ç–º–µ–Ω–∞"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]],
        resize_keyboard=True
    )

def export_menu_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    return ReplyKeyboardMarkup(
        [
            ["üìÑ –ü—Ä–æ—Å—Ç–æ–π CSV", "üìä –ü–æ –º–µ—Å—è—Ü–∞–º"],
            ["üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü", "üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"],
            ["üíº –ë–∞–ª–∞–Ω—Å—ã", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

def export_monthly_menu_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from datetime import date
    today = date.today()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ —Å –º–µ—Å—è—Ü–∞–º–∏
    rows = []
    
    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    month_names = [
        "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
        "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
    ]
    current_month = f"{month_names[today.month - 1]} {today.year}"
    rows.append([f"üìÖ {current_month}"])
    
    # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
    
    recent_months = []
    for i in range(1, 7):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤
        month_date = today.replace(day=1) - timedelta(days=i*30)
        month_name = month_names[month_date.month - 1]
        recent_months.append(f"{month_name} {month_date.year}")
    
    # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —Å—Ç—Ä–æ–∫–∏ –ø–æ 2 –º–µ—Å—è—Ü–∞
    for i in range(0, len(recent_months), 2):
        row = recent_months[i:i+2]
        rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞–∑–∞–¥"
    rows.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def export_period_menu_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    return ReplyKeyboardMarkup(
        [
            ["üìÖ 3 –º–µ—Å—è—Ü–∞", "üìÜ 6 –º–µ—Å—è—Ü–µ–≤"],
            ["üìä 12 –º–µ—Å—è—Ü–µ–≤", "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"]
        ],
        resize_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –ø–æ—à–∞–≥–æ–≤–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞
def expense_add_amount_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], ["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def expense_add_currency_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["UAH", "USD", "EUR"], ["RUB", "PLN", "GBP"], ["‚¨ÖÔ∏è –ù–∞–∑–∞–¥", "‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def expense_add_merchant_kb() -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤–≤–æ–¥–∞ –º–∞–≥–∞–∑–∏–Ω–∞ —Ä–∞—Å—Ö–æ–¥–∞"""
    return ReplyKeyboardMarkup(
        [["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"], ["‚ùå –û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True
    )

def expense_add_category_kb(*, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–∞"""
    from app.categories import get_categories_list, format_category_for_display
    categories = get_categories_list()
    
    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫–∏ –ø–æ 2 –≤ —Ä—è–¥ –¥–ª—è —ç–∫–æ–Ω–æ–º–∏–∏ –º–µ—Å—Ç–∞
    rows = []
    for i in range(0, len(categories), 2):
        row = [format_category_for_display(categories[i])]
        if i + 1 < len(categories):
            row.append(format_category_for_display(categories[i + 1]))
        rows.append(row)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("‚ùå –û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)

def expense_add_account_kb(accounts: list, *, include_back=False, include_cancel=False) -> ReplyKeyboardMarkup:
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    rows = [[acc] for acc in accounts]
    
    tail = []
    if include_back:
        tail.append("‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
    if include_cancel:
        tail.append("‚ùå –û—Ç–º–µ–Ω–∞")
    if tail:
        rows.append(tail)
    
    return ReplyKeyboardMarkup(rows, resize_keyboard=True)
