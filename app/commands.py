# app/commands.py
import os
import json
from telegram import Update, InputFile, ReplyKeyboardRemove
from telegram.ext import ContextTypes

from app.utils import get_user_id
from app.storage import ensure_csv
from app.keyboards import reply_menu_keyboard
from app.logger import get_logger

logger = get_logger(__name__)


async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    logger.info(f"User {get_user_id(update)} started the bot")
    
    await update.effective_message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –û—Ç–ø—Ä–∞–≤—å —Ñ–æ—Ç–æ —á–µ–∫–∞ –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤–æ–µ ‚Äî –∑–∞–ø–∏—à—É –ø–æ–∫—É–ø–∫—É.\n\n"
        "üìã –î–æ—Å—Ç—É–ø–Ω–æ 15 –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤:\n"
        "üçé –ü–∏—Ç–∞–Ω–∏–µ, üè† –ñ–∏–ª—å—ë, üßΩ –ë—ã—Ç–æ–≤—ã–µ —Ç–æ–≤–∞—Ä—ã, üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç,\n"
        "üì± –ö–æ–º–º—É–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏, üíä –ó–¥–æ—Ä–æ–≤—å–µ, üëï –û–¥–µ–∂–¥–∞,\n"
        "üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, üé¨ –î–æ—Å—É–≥, üéÅ –ü–æ–¥–∞—Ä–∫–∏, üì¶ –ü—Ä–æ—á–∏–µ,\n"
        "üè¶ –ë–∞–Ω–∫–æ–≤—Å–∫–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏, üíª –ü–û, üì± –¢–µ—Ö–Ω–∏–∫–∞, üçΩÔ∏è –ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞\n\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "‚Ä¢ /export ‚Äî –≤—ã—Å–ª–∞—Ç—å CSV-—Ñ–∞–π–ª —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "‚Ä¢ /export_balances ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –≤ CSV\n"
        "‚Ä¢ /export_monthly [–≥–æ–¥] [–º–µ—Å—è—Ü] ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –ø–æ –º–µ—Å—è—Ü–∞–º —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏\n"
        "‚Ä¢ /export_last_months [N] ‚Äî —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤\n"
        "‚Ä¢ /sync ‚Äî —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å GitHub\n"
        "‚Ä¢ /sync_status ‚Äî —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏\n"
        "‚Ä¢ /force_sync ‚Äî –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è\n"
        "‚Ä¢ /import_csv ‚Äî –∏–º–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞\n"
        "‚Ä¢ /setbalance <amount> <currency> | /setbalance <amount> <category> <currency>\n"
        "‚Ä¢ /balance ‚Äî –º–µ–Ω—é –ë–∞–ª–∞–Ω—Å\n"
        "‚Ä¢ /menu ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n"
        "‚Ä¢ /hidemenu ‚Äî —Å–∫—Ä—ã—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É\n\n"
        "–†–∞–∑–¥–µ–ª ¬´üõç –†–∞—Å—Ö–æ–¥—ã¬ª ‚Äî –≤ –ø–æ–¥–º–µ–Ω—é.\n"
        "–†–∞–∑–¥–µ–ª ¬´üìã –ö–∞—Ç–µ–≥–æ—Ä–∏–∏¬ª ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.",
        reply_markup=reply_menu_keyboard()
    )


async def menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /menu"""
    await update.effective_message.reply_text(
        "–ú–µ–Ω—é –≤–∫–ª—é—á–µ–Ω–æ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", 
        reply_markup=reply_menu_keyboard()
    )


async def hide_menu_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /hidemenu"""
    await update.effective_message.reply_text(
        "–ú–µ–Ω—é —Å–∫—Ä—ã—Ç–æ.", 
        reply_markup=ReplyKeyboardRemove()
    )


async def export_csv_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export"""
    user_id = get_user_id(update)
    logger.info(f"User {user_id} requested CSV export")
    
    ensure_csv(user_id)
    path = os.path.join("data", str(user_id), "finance.csv")
    
    if not os.path.exists(path):
        return await update.effective_message.reply_text("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.")
    
    try:
        with open(path, "rb") as f:
            await update.effective_message.reply_document(
                InputFile(f, filename="finance.csv")
            )
        logger.info(f"CSV exported successfully for user {user_id}")
    except Exception as e:
        logger.error(f"Failed to export CSV for user {user_id}: {e}")
        await update.effective_message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ñ–∞–π–ª–∞.")


async def rules_list_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /rules - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª"""
    from app.rules import load_rules
    from app.utils import get_user_id
    
    user_id = get_user_id(update)
    rules = load_rules(user_id)
    
    if not rules:
        return await update.effective_message.reply_text("–ü—Ä–∞–≤–∏–ª –ø–æ–∫–∞ –Ω–µ—Ç. –î–æ–±–∞–≤—å—Ç–µ —á–µ—Ä–µ–∑ /setcat.")
    
    lines = ["üß© –ü—Ä–∞–≤–∏–ª–∞:"]
    for rule in rules:
        lines.append(
            f"#{rule.get('id', '?')} ‚Üí {rule.get('category', '')}\n"
            f"  match: {json.dumps(rule.get('match', {}), ensure_ascii=False)}"
        )
    await update.effective_message.reply_text("\n".join(lines))


async def setcat_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /setcat - –¥–æ–±–∞–≤–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏"""
    from app.rules import load_rules, save_rules
    from app.utils import get_user_id, generate_rule_id
    import json
    import re
    
    msg = update.effective_message
    text = (msg.text or "").strip()
    
    try:
        if "->" not in text:
            raise ValueError("–§–æ—Ä–º–∞—Ç: /setcat merchant=...,item=... -> category")
        
        left, right = text.split("->", 1)
        category = right.strip()
        if not category:
            raise ValueError("–ù–µ —É–∫–∞–∑–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ø–æ—Å–ª–µ '->'.")

        left = left.replace("/setcat", "", 1).strip()
        parts = [p.strip() for p in re.split(r"\s+", left) if p.strip()]
        match = {}
        
        for part in parts:
            if "=" not in part:
                continue
            key, value = part.split("=", 1)
            key = key.strip().lower()
            value = value.strip()
            
            if key in ("merchant", "merchant_contains"):
                match["merchant_contains"] = [s.strip() for s in value.split(",") if s.strip()]
            elif key in ("item", "item_contains"):
                match["item_contains"] = [s.strip() for s in value.split(",") if s.strip()]
            elif key == "currency":
                match["currency_is"] = value
            elif key == "payment":
                match["payment_is"] = value
            elif key == "total_min":
                match["total_min"] = float(value.replace(",", "."))
            elif key == "total_max":
                match["total_max"] = float(value.replace(",", "."))
        
        if not match:
            raise ValueError("–ù–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–ª —É—Å–ª–æ–≤–∏—è. –ü—Ä–∏–º–µ—Ä—ã: merchant=REWE,lidl | item=–∫–æ—Ñ–µ,–ª–∞—Ç—Ç–µ | total_max=50")

        rules = load_rules(get_user_id(update))
        new_rule = {"id": generate_rule_id(rules), "category": category, "match": match}
        rules.append(new_rule)
        save_rules(get_user_id(update), rules)
        
        await msg.reply_text(
            f"‚úÖ –ü—Ä–∞–≤–∏–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ: #{new_rule['id']} ‚Üí {category}\n"
            f"match={json.dumps(match, ensure_ascii=False)}"
        )
    except Exception as e:
        await msg.reply_text(f"‚ùå {e}")


async def delrule_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /delrule - —É–¥–∞–ª–∏—Ç—å –ø—Ä–∞–≤–∏–ª–æ"""
    from app.rules import load_rules, save_rules
    from app.utils import get_user_id
    
    msg = update.effective_message
    args = context.args
    
    if not args:
        return await msg.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /delrule <id>")
    
    try:
        rule_id = int(args[0])
    except ValueError:
        return await msg.reply_text("id –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º.")
    
    rules = load_rules(get_user_id(update))
    new_rules = [r for r in rules if int(r.get("id", 0)) != rule_id]
    
    if len(new_rules) == len(rules):
        return await msg.reply_text("–ü—Ä–∞–≤–∏–ª–æ —Å —Ç–∞–∫–∏–º id –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
    
    save_rules(get_user_id(update), new_rules)
    await msg.reply_text(f"üóë –ü—Ä–∞–≤–∏–ª–æ #{rule_id} —É–¥–∞–ª–µ–Ω–æ.")


async def setbalance_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /setbalance - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–∞–ª–∞–Ω—Å"""
    from app.storage import set_balance
    from app.utils import get_user_id
    
    msg = update.effective_message
    
    try:
        # /setbalance 1000 EUR  |  /setbalance 300 groceries EUR
        args = context.args
        if len(args) == 2:
            amount, currency = args
            category = None
        elif len(args) == 3:
            amount, category, currency = args
        else:
            raise ValueError("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /setbalance <amount> <currency> –ò–õ–ò /setbalance <amount> <category> <currency>")
        
        amount = float(str(amount).replace(",", "."))
        key, val = set_balance(get_user_id(update), amount, currency, category)
        await msg.reply_text(f"‚úÖ –ë–∞–ª–∞–Ω—Å –¥–ª—è '{key}' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {val:.2f}")
    except Exception as e:
        await msg.reply_text(f"‚ùå {e}")


async def import_csv_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /import_csv - –∏–º–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∏–∑ CSV —Ñ–∞–π–ª–∞"""
    from app.services.csv_importer import import_csv_balances
    from app.storage import add_account
    from app.utils import get_user_id
    
    user_id = get_user_id(update)
    msg = update.effective_message
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    if not msg.document:
        return await msg.reply_text(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ CSV —Ñ–∞–π–ª —Å –±–∞–ª–∞–Ω—Å–∞–º–∏.\n\n"
            "–§–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞:\n"
            "‚Ä¢ –ü–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –Ω–∞–∑–≤–∞–Ω–∏—è —Å—á–µ—Ç–æ–≤\n"
            "‚Ä¢ –û—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–ª–æ–Ω–∫–∏: –º–µ—Å—è—Ü—ã —Å –±–∞–ª–∞–Ω—Å–∞–º–∏\n"
            "‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã: EUR, UAH, USD, RUB\n\n"
            "–ü—Ä–∏–º–µ—Ä: /import_csv (–∏ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª)"
        )
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not msg.document.file_name.lower().endswith('.csv'):
        return await msg.reply_text("‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ .csv")
    
    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file = await context.bot.get_file(msg.document.file_id)
        temp_path = f"temp_import_{user_id}.csv"
        
        await file.download_to_drive(temp_path)
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        result = import_csv_balances(temp_path)
        
        if not result['success']:
            return await msg.reply_text(f"‚ùå {result['message']}")
        
        data = result['data']
        accounts_for_import = data['accounts_for_import']
        
        if not accounts_for_import:
            return await msg.reply_text("‚ùå –í —Ñ–∞–π–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Å—á–µ—Ç–æ–≤ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞")
        
        # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º —Å—á–µ—Ç–∞
        from app.services.csv_importer import auto_create_accounts_from_csv
        create_result = auto_create_accounts_from_csv(user_id, data, overwrite_existing=False)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        if os.path.exists(temp_path):
            os.remove(temp_path)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = f"‚úÖ –ò–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
        response += f"üìä –°–æ–∑–¥–∞–Ω–æ —Å—á–µ—Ç–æ–≤: {create_result['created']}\n"
        response += f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {create_result['updated']}\n"
        response += f"‚è≠Ô∏è –ü—Ä–æ–ø—É—â–µ–Ω–æ —Å—á–µ—Ç–æ–≤: {create_result['skipped']}\n"
        response += f"üí∞ –ù–∞–π–¥–µ–Ω–æ –≤–∞–ª—é—Ç: {len(data['currencies'])}\n"
        response += f"üìÖ –î–∞–Ω–Ω—ã–µ –∑–∞ –ø–µ—Ä–∏–æ–¥: {len(data['headers'])-1} –º–µ—Å—è—Ü–µ–≤\n\n"
        
        if create_result['errors']:
            response += f"‚ö†Ô∏è –û—à–∏–±–∫–∏ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ:\n" + "\n".join(create_result['errors'][:5])
            if len(create_result['errors']) > 5:
                response += f"\n... –∏ –µ—â–µ {len(create_result['errors'])-5} –æ—à–∏–±–æ–∫"
        
        response += f"\n\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /balance –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—á–µ—Ç–æ–≤"
        
        await msg.reply_text(response)
        logger.info(f"User {user_id} imported {create_result['created']} accounts from CSV")
        
    except Exception as e:
        logger.error(f"CSV import error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ: {e}")
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        if 'temp_path' in locals() and os.path.exists(temp_path):
            os.remove(temp_path)


async def export_balances_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export_balances - —ç–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –≤ CSV"""
    from app.services.csv_importer import export_balances_to_csv
    from app.utils import get_user_id
    
    user_id = get_user_id(update)
    msg = update.effective_message
    
    try:
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∞–ª–∞–Ω—Å—ã
        result = export_balances_to_csv(user_id)
        
        if not result['success']:
            return await msg.reply_text(f"‚ùå {result['message']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        file_path = result['file_path']
        if os.path.exists(file_path):
            with open(file_path, "rb") as f:
                await msg.reply_document(
                    InputFile(f, filename=f"balances_{user_id}.csv"),
                    caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                           f"üìä –°—á–µ—Ç–æ–≤: {result['accounts_count']}\n"
                           f"üí∞ –í–∞–ª—é—Ç: {result['currencies_count']}"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            os.remove(file_path)
            logger.info(f"User {user_id} exported balances successfully")
        else:
            await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            
    except Exception as e:
        logger.error(f"Balance export error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –±–∞–ª–∞–Ω—Å–æ–≤: {e}")


async def export_monthly_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export_monthly - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –º–µ—Å—è—Ü"""
    from app.services.enhanced_exporter import export_current_month, create_export_archive
    from app.utils import get_user_id
    
    user_id = get_user_id(update)
    msg = update.effective_message
    args = context.args
    
    try:
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–µ—Ä–∏–æ–¥ —ç–∫—Å–ø–æ—Ä—Ç–∞
        if len(args) == 2:
            # /export_monthly 2024 3
            year = int(args[0])
            month = int(args[1])
            if not (1 <= month <= 12):
                return await msg.reply_text("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
        elif len(args) == 1:
            # /export_monthly 3 (—Ç–µ–∫—É—â–∏–π –≥–æ–¥)
            from datetime import date
            year = date.today().year
            month = int(args[0])
            if not (1 <= month <= 12):
                return await msg.reply_text("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
        else:
            # /export_monthly (—Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü)
            from datetime import date
            today = date.today()
            year = today.year
            month = today.month
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏
        result = create_export_archive(user_id, year, month)
        
        if not result['success']:
            return await msg.reply_text(f"‚ùå {result['message']}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        archive_path = result['archive_path']
        if os.path.exists(archive_path):
            with open(archive_path, "rb") as f:
                await msg.reply_document(
                    InputFile(f, filename=f"finance_export_{year}_{month:02d}.zip"),
                    caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {year}-{month:02d} –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                           f"üìÅ –§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {result['files_count']}\n"
                           f"üìä –¢–∞–±–ª–∏—Ü—ã: –¥–æ—Ö–æ–¥—ã, —Ä–∞—Å—Ö–æ–¥—ã, —Å—á–µ—Ç–∞, –æ–±–º–µ–Ω—ã, —Å–≤–æ–¥–Ω–∞—è"
                )
            
            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            os.remove(archive_path)
            logger.info(f"User {user_id} exported monthly data for {year}-{month}")
        else:
            await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            
    except ValueError as e:
        await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                           "‚Ä¢ /export_monthly - —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü\n"
                           "‚Ä¢ /export_monthly 3 - –º–∞—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞\n"
                           "‚Ä¢ /export_monthly 2024 3 - –º–∞—Ä—Ç 2024")
    except Exception as e:
        logger.error(f"Monthly export error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


async def export_last_months_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /export_last_months - —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ N –º–µ—Å—è—Ü–µ–≤"""
    from app.services.enhanced_exporter import export_last_n_months
    from app.utils import get_user_id
    
    user_id = get_user_id(update)
    msg = update.effective_message
    args = context.args
    
    try:
        if not args:
            months_count = 3  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 3 –º–µ—Å—è—Ü–∞
        else:
            months_count = int(args[0])
            if months_count <= 0 or months_count > 12:
                return await msg.reply_text("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 12")
        
        # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        result = export_last_n_months(user_id, months_count)
        
        if not result['success']:
            return await msg.reply_text(f"‚ùå {result['message']}")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤ —Å –¥–∞–Ω–Ω—ã–º–∏ –∑–∞ –≤—Å–µ –º–µ—Å—è—Ü—ã
        import zipfile
        from datetime import date
        
        output_dir = f"exports/{user_id}"
        os.makedirs(output_dir, exist_ok=True)
        
        archive_name = f"finance_export_{user_id}_last_{months_count}_months.zip"
        archive_path = os.path.join(output_dir, archive_name)
        
        # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —ç–∫—Å–ø–æ—Ä—Ç–∞
        all_files = []
        for export_result in result.get('results', []):
            if export_result.get('success'):
                all_files.extend(export_result.get('files_created', []))
        
        if not all_files:
            return await msg.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –ø–µ—Ä–∏–æ–¥")
        
        # –°–æ–∑–¥–∞–µ–º –∞—Ä—Ö–∏–≤
        with zipfile.ZipFile(archive_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in all_files:
                if os.path.exists(file_path):
                    # –î–æ–±–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤ —Å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–º –ø—É—Ç–µ–º
                    arcname = os.path.basename(file_path)
                    zipf.write(file_path, arcname)
        
        # –£–¥–∞–ª—è–µ–º –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–∏—è
        for file_path in all_files:
            if os.path.exists(file_path):
                os.remove(file_path)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞—Ä—Ö–∏–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if os.path.exists(archive_path):
            with open(archive_path, "rb") as f:
                await msg.reply_document(
                    InputFile(f, filename=f"finance_export_last_{months_count}_months.zip"),
                    caption=f"‚úÖ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞ {months_count} –º–µ—Å—è—Ü–µ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                           f"üìÅ –§–∞–π–ª–æ–≤ –≤ –∞—Ä—Ö–∏–≤–µ: {len(all_files)}\n"
                           f"üìä –£—Å–ø–µ—à–Ω—ã—Ö —ç–∫—Å–ø–æ—Ä—Ç–æ–≤: {result['successful_count']}/{result['total_count']}"
                )
            
            # –£–¥–∞–ª—è–µ–º –∞—Ä—Ö–∏–≤
            os.remove(archive_path)
            logger.info(f"User {user_id} exported data for last {months_count} months")
        else:
            await msg.reply_text("‚ùå –û—à–∏–±–∫–∞: –∞—Ä—Ö–∏–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è")
            
    except ValueError as e:
        await msg.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                           "‚Ä¢ /export_last_months - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞\n"
                           "‚Ä¢ /export_last_months 6 - –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 –º–µ—Å—è—Ü–µ–≤")
    except Exception as e:
        logger.error(f"Last months export error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")


# ==================== –ö–û–ú–ê–ù–î–´ –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò –î–ê–ù–ù–´–• ====================

async def sync_data_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await update.message.reply_text("üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ (–±–µ–∑ —Ä–µ–∞–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –ø–æ–∫–∞)
        await progress_msg.edit_text(
            "‚úÖ **–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            "üìä –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GitHub\n"
            "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π\n\n"
            "üí° –ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö"
        )

async def sync_status_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏")
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        status_text = "üìä **–°—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö**\n\n"
        status_text += "üîÑ **–ê–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:** –ê–∫—Ç–∏–≤–Ω–æ\n"
        status_text += "‚è∞ **–ò–Ω—Ç–µ—Ä–≤–∞–ª:** 300—Å (5 –º–∏–Ω—É—Ç)\n"
        status_text += "üìÖ **–ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ:** –ù–µ–¥–∞–≤–Ω–æ\n\n"
        status_text += "üìÅ **–§–∞–π–ª–æ–≤ –¥–∞–Ω–Ω—ã—Ö:** –ê–∫—Ç–∏–≤–Ω—ã–µ\n"
        status_text += "üîÑ **–°—Ç–∞—Ç—É—Å git:** –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ\n"
        status_text += "‚úÖ **–í—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω—ã**\n\n"
        status_text += "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /sync –¥–ª—è —Ä—É—á–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        
        await update.message.reply_text(status_text)
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        )

async def force_sync_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        user_id = update.effective_user.id
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—é")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
        progress_msg = await update.message.reply_text("üîÑ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
        await progress_msg.edit_text(
            "‚úÖ **–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\n\n"
            "üìä –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n"
            "üîÑ –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –≤ GitHub\n\n"
            "üí° –î–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç"
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏: {e}")
        await update.message.reply_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"
        )
