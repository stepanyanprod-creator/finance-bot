# app/handlers/export.py
"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö"""

import os
from datetime import date, datetime
from telegram import Update, InputFile
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from app.constants import EXPORT_MENU, EXPORT_MONTHLY_MENU, EXPORT_PERIOD_MENU
from app.keyboards import (
    reply_menu_keyboard, export_menu_kb, export_monthly_menu_kb, export_period_menu_kb
)
from app.utils import get_user_id as _uid
from app.logger import get_logger

logger = get_logger(__name__)


async def export_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await update.effective_message.reply_text(
        "üì§ –ú–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞ –¥–∞–Ω–Ω—ã—Ö:\n\n"
        "‚Ä¢ üìÑ –ü—Ä–æ—Å—Ç–æ–π CSV - –æ–±—ã—á–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π\n"
        "‚Ä¢ üìä –ü–æ –º–µ—Å—è—Ü–∞–º - –¥–µ—Ç–∞–ª—å–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Å —Ç–∞–±–ª–∏—Ü–∞–º–∏\n"
        "‚Ä¢ üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü - –±—ã—Å—Ç—Ä—ã–π —ç–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞\n"
        "‚Ä¢ üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞ - —ç–∫—Å–ø–æ—Ä—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥\n"
        "‚Ä¢ üíº –ë–∞–ª–∞–Ω—Å—ã - —ç–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤ —Å—á–µ—Ç–æ–≤",
        reply_markup=export_menu_kb()
    )
    return EXPORT_MENU


async def export_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "üìÑ –ü—Ä–æ—Å—Ç–æ–π CSV":
        return await export_simple_csv(update, context)
    elif text == "üìä –ü–æ –º–µ—Å—è—Ü–∞–º":
        return await export_monthly_menu_entry(update, context)
    elif text == "üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü":
        return await export_current_month(update, context)
    elif text == "üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞":
        return await export_last_3_months(update, context)
    elif text == "üíº –ë–∞–ª–∞–Ω—Å—ã":
        return await export_balances(update, context)
    elif text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await export_back(update, context)
    
    return EXPORT_MENU


async def export_simple_csv(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ—Å—Ç–æ–π —ç–∫—Å–ø–æ—Ä—Ç CSV"""
    from app.commands import export_csv_command
    from app.keyboards import reply_menu_keyboard
    await export_csv_command(update, context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_balances(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –±–∞–ª–∞–Ω—Å–æ–≤"""
    from app.commands import export_balances_command
    from app.keyboards import reply_menu_keyboard
    await export_balances_command(update, context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_current_month(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
    from app.commands import export_monthly_command
    from app.keyboards import reply_menu_keyboard
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –ø—É—Å—Ç—ã–º–∏ –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    class MockContext:
        def __init__(self):
            self.args = []
    
    mock_context = MockContext()
    await export_monthly_command(update, mock_context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_last_3_months(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞"""
    from app.commands import export_last_months_command
    from app.keyboards import reply_menu_keyboard
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º 3
    class MockContext:
        def __init__(self):
            self.args = ["3"]
    
    mock_context = MockContext()
    await export_last_months_command(update, mock_context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_monthly_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await update.effective_message.reply_text(
        "üìä –í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
        "–≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞–µ—Ç –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã:\n"
        "‚Ä¢ üìà –î–æ—Ö–æ–¥—ã\n"
        "‚Ä¢ üí∏ –†–∞—Å—Ö–æ–¥—ã\n"
        "‚Ä¢ üè¶ –°—á–µ—Ç–∞\n"
        "‚Ä¢ üí± –û–±–º–µ–Ω—ã\n"
        "‚Ä¢ üìã –°–≤–æ–¥–Ω–∞—è",
        reply_markup=export_monthly_menu_kb()
    )
    return EXPORT_MONTHLY_MENU


async def export_monthly_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await export_menu_entry(update, context)
    
    # –ü–∞—Ä—Å–∏–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
    try:
        year, month = parse_month_selection(text)
        if year and month:
            return await export_specific_month(update, context, year, month)
    except Exception as e:
        logger.error(f"Error parsing month selection: {e}")
    
    await update.effective_message.reply_text(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Å—è—Ü. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        reply_markup=export_monthly_menu_kb()
    )
    return EXPORT_MONTHLY_MENU


def parse_month_selection(text: str) -> tuple:
    """–ü–∞—Ä—Å–∏—Ç –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏"""
    from datetime import date
    
    # –£–±–∏—Ä–∞–µ–º —ç–º–æ–¥–∑–∏ –∏ –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã
    text = text.replace("üìÖ", "").strip()
    
    # –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü
    if "—Ç–µ–∫—É—â–∏–π" in text.lower() or text == date.today().strftime("%B %Y"):
        today = date.today()
        return today.year, today.month
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥
    month_names = {
        "—è–Ω–≤–∞—Ä—å": 1, "—Ñ–µ–≤—Ä–∞–ª—å": 2, "–º–∞—Ä—Ç": 3, "–∞–ø—Ä–µ–ª—å": 4,
        "–º–∞–π": 5, "–∏—é–Ω—å": 6, "–∏—é–ª—å": 7, "–∞–≤–≥—É—Å—Ç": 8,
        "—Å–µ–Ω—Ç—è–±—Ä—å": 9, "–æ–∫—Ç—è–±—Ä—å": 10, "–Ω–æ—è–±—Ä—å": 11, "–¥–µ–∫–∞–±—Ä—å": 12
    }
    
    parts = text.split()
    if len(parts) >= 2:
        month_name = parts[0].lower()
        year_str = parts[1]
        
        if month_name in month_names:
            try:
                year = int(year_str)
                month = month_names[month_name]
                return year, month
            except ValueError:
                pass
    
    return None, None


async def export_specific_month(update: Update, context: ContextTypes.DEFAULT_TYPE, year: int, month: int):
    """–≠–∫—Å–ø–æ—Ä—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
    from app.commands import export_monthly_command
    from app.keyboards import reply_menu_keyboard
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–∞–º–∏
    class MockContext:
        def __init__(self, year, month):
            self.args = [str(year), str(month)]
    
    mock_context = MockContext(year, month)
    await export_monthly_command(update, mock_context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_period_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—Ö–æ–¥ –≤ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    await update.effective_message.reply_text(
        "üìÜ –í—ã–±–µ—Ä–∏—Ç–µ –ø–µ—Ä–∏–æ–¥ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞:\n\n"
        "–≠–∫—Å–ø–æ—Ä—Ç –≤–∫–ª—é—á–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–µ—Å—è—Ü–µ–≤\n"
        "—Å –æ—Ç–¥–µ–ª—å–Ω—ã–º–∏ —Ç–∞–±–ª–∏—Ü–∞–º–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –º–µ—Å—è—Ü–∞.",
        reply_markup=export_period_menu_kb()
    )
    return EXPORT_PERIOD_MENU


async def export_period_menu_router(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–†–æ—É—Ç–µ—Ä –¥–ª—è –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –ø–µ—Ä–∏–æ–¥–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        return await export_menu_entry(update, context)
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—è—Ü–µ–≤
    months_count = None
    if "3 –º–µ—Å—è—Ü–∞" in text:
        months_count = 3
    elif "6 –º–µ—Å—è—Ü–µ–≤" in text:
        months_count = 6
    elif "12 –º–µ—Å—è—Ü–µ–≤" in text:
        months_count = 12
    
    if months_count:
        return await export_period(update, context, months_count)
    
    await update.effective_message.reply_text(
        "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–µ—Ä–∏–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
        reply_markup=export_period_menu_kb()
    )
    return EXPORT_PERIOD_MENU


async def export_period(update: Update, context: ContextTypes.DEFAULT_TYPE, months_count: int):
    """–≠–∫—Å–ø–æ—Ä—Ç –∑–∞ –ø–µ—Ä–∏–æ–¥"""
    from app.commands import export_last_months_command
    from app.keyboards import reply_menu_keyboard
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å –∞—Ä–≥—É–º–µ–Ω—Ç–æ–º
    class MockContext:
        def __init__(self, months):
            self.args = [str(months)]
    
    mock_context = MockContext(months_count)
    await export_last_months_command(update, mock_context)
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


async def export_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.effective_message.reply_text(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=reply_menu_keyboard()
    )
    return ConversationHandler.END


# –§–∞–±—Ä–∏–∫–∞ ConversationHandler –¥–ª—è main.py
def build_export_conv() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üì§ –≠–∫—Å–ø–æ—Ä—Ç$"), export_menu_entry),
        ],
        states={
            EXPORT_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, export_menu_router),
            ],
            EXPORT_MONTHLY_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, export_monthly_menu_router),
            ],
            EXPORT_PERIOD_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, export_period_menu_router),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), export_back)],
        allow_reentry=True,
    )
