# app/handlers/voice.py
import tempfile
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
from app.constants import CHOOSE_ACC_FOR_RECEIPT, CHOOSE_CATEGORY_FOR_RECEIPT
from app.keyboards import accounts_kb, categories_kb
from app.speech import ffmpeg_convert_to_mp3, transcribe_openai, parse_spoken_purchase
from app.rules import apply_category_rules
from app.storage import (
    append_row_csv, dec_balance, dec_account, inc_account,
    list_accounts, fmt_money
)

from app.utils import get_user_id as _uid

async def on_voice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.effective_message
    voice = msg.voice or msg.audio
    if not voice:
        return
    tg_file = await context.bot.get_file(voice.file_id)
    with tempfile.NamedTemporaryFile(suffix=".oga", delete=False) as tmp_in:
        await tg_file.download_to_drive(tmp_in.name)
        in_path = tmp_in.name

    # ffmpeg ‚Üí mp3
    try:
        out_path = ffmpeg_convert_to_mp3(in_path)
    except Exception as e:
        await msg.reply_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ: {e}")
        return

    await msg.reply_text("üéô –†–∞—Å–ø–æ–∑–Ω–∞—é —Ä–µ—á—å‚Ä¶")
    try:
        text = transcribe_openai(out_path)
        if not text:
            await msg.reply_text("–ù–µ —Ä–∞—Å—Å–ª—ã—à–∞–ª. –°–∫–∞–∂–∏ –µ—â—ë —Ä–∞–∑, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞.")
            return

        data = parse_spoken_purchase(text)

        # —É–≥–∞–¥–∞—Ç—å —Å—á—ë—Ç –ø–æ –ø–æ–¥—Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –Ω–µ –Ω–∞–∑–≤–∞–Ω —è–≤–Ω–æ
        if not data.get("payment_method"):
            accounts = list_accounts(_uid(update))
            low = text.lower()
            for name in accounts.keys():
                if name.lower() in low:
                    data["payment_method"] = name
                    break

        if not data.get("category"):
            auto = apply_category_rules(data)
            if auto:
                # –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
                from app.categories import validate_and_normalize_category
                validated_cat = validate_and_normalize_category(auto)
                if validated_cat:
                    data["category"] = validated_cat

        # –µ—Å–ª–∏ —Å—á—ë—Ç —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞ ‚Äî –ø—Ä–æ–≤–æ–¥–∏–º —Å—Ä–∞–∑—É
        accs = list_accounts(_uid(update))
        acc_name = (data.get("payment_method") or "").strip()
        if acc_name and acc_name in accs and data.get("category"):
            try:
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç—Ä–∞–Ω—Å–∫—Ä–∏–ø—Ü–∏—é –≤ –ø–æ–ª–µ notes
                data_with_notes = data.copy()
                data_with_notes['notes'] = f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {text}"
                append_row_csv(_uid(update), data_with_notes, source=f"voice:{voice.file_id}")
                
                total = float(data.get("total", 0) or 0)
                currency = data.get("currency", "")
                
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Ö–æ–¥ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
                if total > 0:
                    # –î–æ—Ö–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç
                    from app.handlers.income import inc_balance_for_income
                    inc_balance_for_income(_uid(update), total, currency, data.get("category"))
                    inc_account(_uid(update), acc_name, total)
                    amount_display = f"üí∞ –î–æ—Ö–æ–¥: {total:.2f} {currency}"
                else:
                    # –†–∞—Å—Ö–æ–¥ - —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç
                    dec_balance(_uid(update), amount=abs(total), currency=currency,
                                category=(data.get("category") or None))
                    dec_account(_uid(update), acc_name, abs(total))
                    amount_display = f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(total):.2f} {currency}"
                
                await msg.reply_text(
                    f"üìù ¬´{text}¬ª\n"
                    f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ: {data.get('merchant','?')} ‚Äî "
                    f"{amount_display} –æ—Ç {data.get('date','')}\n"
                    f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category') or '‚Äî'}\n"
                    f"–°—á—ë—Ç: {acc_name}"
                )
                return
            except Exception as e:
                await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}")
                return

        # –∏–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å–∏–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–ª–∏ —Å—á—ë—Ç
        # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–º–µ—Ç–∫–∏ –∫ –¥–∞–Ω–Ω—ã–º
        data_with_notes = data.copy()
        data_with_notes['notes'] = f"–ì–æ–ª–æ—Å–æ–≤–∞—è –∑–∞–ø–∏—Å—å: {text}"
        context.user_data["pending_receipt"] = {"data": data_with_notes, "photo_id": ""}
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if not data.get("category"):
            pretty = (
                f"–†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´{text}¬ª\n"
                f"–î–∞—Ç–∞: {data['date']}\n"
                f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('merchant') or '‚Äî'}\n"
                f"–°—É–º–º–∞: {fmt_money(data.get('total',0), data.get('currency'))}\n\n"
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:"
            )
            await msg.reply_text(pretty, reply_markup=categories_kb(include_cancel=True))
            return CHOOSE_CATEGORY_FOR_RECEIPT
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, –Ω–æ –Ω–µ—Ç —Å—á–µ—Ç–∞ –∏–ª–∏ —Å—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        if not accs:
            await msg.reply_text("–ù—É–∂–µ–Ω —Å—á—ë—Ç: –∑–∞–π–¥–∏ –≤ üíº –ë–∞–ª–∞–Ω—Å ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç¬ª.",
                                 reply_markup=ReplyKeyboardMarkup([["–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ë–∞–ª–∞–Ω—Å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
            return CHOOSE_ACC_FOR_RECEIPT

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Ö–æ–¥ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
        total = float(data.get('total', 0) or 0)
        if total > 0:
            account_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:"
        else:
            account_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
        
        pretty = (
            f"–†–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´{text}¬ª\n"
            f"–î–∞—Ç–∞: {data['date']}\n"
            f"–ò—Å—Ç–æ—á–Ω–∏–∫: {data.get('merchant') or '‚Äî'}\n"
            f"–°—É–º–º–∞: {fmt_money(data.get('total',0), data.get('currency'))}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data.get('category') or '‚Äî'}\n\n"
            f"{account_message}"
        )
        await msg.reply_text(pretty, reply_markup=accounts_kb(list(accs.keys()), include_cancel=True))
        return CHOOSE_ACC_FOR_RECEIPT

    except Exception as e:
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è: {e}")

async def voice_choose_category_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ —Ñ–æ—Ç–æ"""
    msg = update.effective_message
    choice = (msg.text or "").strip()

    if choice == "–û—Ç–º–µ–Ω–∞":
        context.user_data.pop("pending_receipt", None)
        await msg.reply_text("–û—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=reply_menu_keyboard())
        return ConversationHandler.END

    pend = context.user_data.get("pending_receipt")
    if not pend:
        await msg.reply_text("–ù–µ—Ç –æ–∂–∏–¥–∞—é—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö.", reply_markup=reply_menu_keyboard())
        return ConversationHandler.END

    # –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    from app.categories import get_categories_list, format_category_for_display
    categories = get_categories_list()
    selected_category = None
    
    # –ò—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ —Å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–æ–π
    for category in categories:
        if format_category_for_display(category) == choice:
            selected_category = category.name
            break
    
    # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –µ—Å—Ç—å
    if not selected_category:
        selected_category = choice

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π
    data = pend.get("data")
    if data:
        if hasattr(data, 'category'):
            # –î–ª—è enhanced photo (–æ–±—ä–µ–∫—Ç)
            data.category = selected_category
        else:
            # –î–ª—è voice (—Å–ª–æ–≤–∞—Ä—å)
            data["category"] = selected_category

    # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Å—á–µ—Ç–∞
    accs = list_accounts(_uid(update))
    if not accs:
        await msg.reply_text("–ù—É–∂–µ–Ω —Å—á—ë—Ç: –∑–∞–π–¥–∏ –≤ üíº –ë–∞–ª–∞–Ω—Å ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç¬ª.",
                             reply_markup=ReplyKeyboardMarkup([["–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –ë–∞–ª–∞–Ω—Å"], ["–û—Ç–º–µ–Ω–∞"]], resize_keyboard=True))
        return CHOOSE_ACC_FOR_RECEIPT

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Ö–æ–¥ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
    data = pend.get("data")
    total = 0
    if data:
        if hasattr(data, 'total'):
            # –î–ª—è enhanced photo (–æ–±—ä–µ–∫—Ç)
            total = float(data.total or 0)
        else:
            # –î–ª—è voice (—Å–ª–æ–≤–∞—Ä—å)
            total = float(data.get('total', 0) or 0)
    
    if total > 0:
        account_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç:"
    else:
        account_message = "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã:"
    
    pretty = (
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {selected_category}\n\n"
        f"{account_message}"
    )
    await msg.reply_text(pretty, reply_markup=accounts_kb(list(accs.keys()), include_cancel=True))
    return CHOOSE_ACC_FOR_RECEIPT
