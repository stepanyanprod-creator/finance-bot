# app/handlers/enhanced_photo.py
import tempfile
from typing import Optional

from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes

from app.utils import get_user_id
from app.logger import get_logger
from app.exceptions import ReceiptParsingError, ValidationError
from app.services.enhanced_receipt_parser import EnhancedReceiptParser
from app.services.smart_categorization import SmartCategorizationService
from app.services.receipt_validator import ReceiptValidator
from app.storage import list_accounts
from app.keyboards import accounts_kb, categories_kb
from app.constants import CHOOSE_ACC_FOR_RECEIPT, CHOOSE_CATEGORY_FOR_RECEIPT

logger = get_logger(__name__)


async def enhanced_on_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ —á–µ–∫–æ–≤"""
    msg = update.effective_message
    user_id = get_user_id(update)
    
    if not msg.photo:
        await msg.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ñ–æ—Ç–æ.", parse_mode='HTML')
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–ª—É—á—à–µ–≥–æ –∫–∞—á–µ—Å—Ç–≤–∞
    photo = msg.photo[-1]
    tg_file = await context.bot.get_file(photo.file_id)
    
    # –°–∫–∞—á–∏–≤–∞–µ–º –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
    with tempfile.NamedTemporaryFile(suffix=".jpg", delete=False) as tmp:
        await tg_file.download_to_drive(tmp.name)
        local_path = tmp.name
    
    try:
        await msg.reply_text("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —á–µ–∫...", parse_mode='HTML')
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å—ã
        parser = EnhancedReceiptParser()
        validator = ReceiptValidator()
        categorizer = SmartCategorizationService(user_id)
        
        # –ü–∞—Ä—Å–∏–º —á–µ–∫
        parsing_result = parser.parse_receipt(local_path, user_id)
        
        if not parsing_result.success:
            await msg.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ–∫–∞:\n" + 
                "\n".join(f"‚Ä¢ {error}" for error in parsing_result.errors)
            )
            return
        
        receipt_data = parsing_result.data
        
        # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        validation_result = validator.validate_receipt(receipt_data)
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if validation_result.warnings:
            warning_text = "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:\n" + "\n".join(f"‚Ä¢ {w}" for w in validation_result.warnings[:3])
            await msg.reply_text(warning_text)
        
        if validation_result.errors:
            error_text = "‚ùå –û—à–∏–±–∫–∏ –≤ –¥–∞–Ω–Ω—ã—Ö:\n" + "\n".join(f"‚Ä¢ {e}" for e in validation_result.errors[:3])
            await msg.reply_text(error_text)
            
            # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            suggestions = validator.suggest_corrections(receipt_data)
            if suggestions:
                suggestion_text = "üí° –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é:\n"
                for field, value in suggestions.items():
                    suggestion_text += f"‚Ä¢ {field}: {value}\n"
                await msg.reply_text(suggestion_text)
            
            return
        
        # –ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è
        category_suggestion = categorizer.categorize_receipt(receipt_data)
        if category_suggestion.category:
            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏—è—Ö
            from app.categories import validate_and_normalize_category
            validated_cat = validate_and_normalize_category(category_suggestion.category)
            if validated_cat:
                receipt_data.category = validated_cat
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞–Ω–∞–ª–∏–∑–∞
        confidence_emoji = "üü¢" if validation_result.confidence_score > 0.8 else "üü°" if validation_result.confidence_score > 0.5 else "üî¥"
        
        analysis_text = (
            f"{confidence_emoji} <b>–ê–Ω–∞–ª–∏–∑ —á–µ–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω</b>\n\n"
            f"üìÖ <b>–î–∞—Ç–∞:</b> {receipt_data.date}\n"
            f"üè™ <b>–ò—Å—Ç–æ—á–Ω–∏–∫:</b> {receipt_data.merchant}\n"
            f"üí∞ <b>–°—É–º–º–∞:</b> {receipt_data.total:.2f} {receipt_data.currency}\n"
            f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏—è:</b> {receipt_data.category}\n"
            f"üéØ <b>–£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å:</b> {validation_result.confidence_score:.0%}\n"
            f"üì¶ <b>–¢–æ–≤–∞—Ä–æ–≤:</b> {len(receipt_data.items)}"
        )
        
        if receipt_data.items:
            analysis_text += "\n\nüõí <b>–¢–æ–≤–∞—Ä—ã:</b>\n"
            for i, item in enumerate(receipt_data.items[:5]):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 5 —Ç–æ–≤–∞—Ä–æ–≤
                analysis_text += f"‚Ä¢ {item.name} - {item.qty}√ó{item.price:.2f}\n"
            
            if len(receipt_data.items) > 5:
                analysis_text += f"... –∏ –µ—â–µ {len(receipt_data.items) - 5} —Ç–æ–≤–∞—Ä–æ–≤"
        
        await msg.reply_text(analysis_text, parse_mode='HTML')
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞
        context.user_data["pending_receipt"] = {
            "data": receipt_data,
            "photo_id": photo.file_id,
            "parsing_result": parsing_result,
            "validation_result": validation_result,
            "category_suggestion": category_suggestion
        }
        
        # –ï—Å–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞, —Å–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏—é
        if not receipt_data.category:
            await msg.reply_text(
                "üìÇ <b>–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:</b>",
                reply_markup=categories_kb(include_cancel=True),
                parse_mode='HTML'
            )
            return CHOOSE_CATEGORY_FOR_RECEIPT
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Å—á–µ—Ç–æ–≤
        accounts = list_accounts(user_id)
        if not accounts:
            from app.keyboards import reply_menu_keyboard
            await msg.reply_text(
                "üíº <b>–ù—É–∂–µ–Ω —Å—á–µ—Ç –¥–ª—è –æ–ø–ª–∞—Ç—ã</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—á–µ—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –∏—Ö –≤ –º–µ–Ω—é ¬´üíº –ë–∞–ª–∞–Ω—Å¬ª ‚Üí ¬´–î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç¬ª.",
                reply_markup=reply_menu_keyboard(),
                parse_mode='HTML'
            )
            return -1
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Ö–æ–¥ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
        total = float(receipt_data.total or 0)
        if total > 0:
            account_message = "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è:</b>"
        else:
            account_message = "üí≥ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è:</b>"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—á–µ—Ç–∞
        await msg.reply_text(
            account_message,
            reply_markup=accounts_kb(list(accounts.keys()), include_cancel=True),
            parse_mode='HTML'
        )
        return CHOOSE_ACC_FOR_RECEIPT
        
    except ReceiptParsingError as e:
        logger.error(f"Receipt parsing error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ —á–µ–∫–∞: {e}", parse_mode='HTML')
        
    except ValidationError as e:
        logger.error(f"Validation error for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö: {e}", parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Unexpected error in photo processing for user {user_id}: {e}")
        await msg.reply_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Ñ–æ—Ç–æ.", parse_mode='HTML')
        
    finally:
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        try:
            import os
            os.unlink(local_path)
        except:
            pass


async def enhanced_receipt_choose_account_finish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å—á–µ—Ç–∞"""
    msg = update.effective_message
    user_id = get_user_id(update)
    choice = (msg.text or "").strip()
    
    if choice in {"–û—Ç–º–µ–Ω–∞", "‚ùå –û—Ç–º–µ–Ω–∞"}:
        context.user_data.pop("pending_receipt", None)
        context.user_data.pop("pending_income", None)
        from app.keyboards import reply_menu_keyboard
        await msg.reply_text(
            "‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ.",
            reply_markup=reply_menu_keyboard()
        )
        return -1
    
    if choice == "üíº –ë–∞–ª–∞–Ω—Å":
        from app.handlers.balance import balance_menu_entry
        context.user_data.pop("pending_receipt", None)
        return await balance_menu_entry(update, context)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ–∫–∞ –∏–ª–∏ –¥–æ—Ö–æ–¥–∞
    pending_data = context.user_data.get("pending_receipt")
    pending_income = context.user_data.get("pending_income")
    
    if not pending_data and not pending_income:
        await msg.reply_text("‚ùå –î–∞–Ω–Ω—ã–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.", parse_mode='HTML')
        return -1
    
    accounts = list_accounts(user_id)
    
    if choice not in accounts:
        await msg.reply_text(
            "‚ùå –í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=accounts_kb(list(accounts.keys()), include_cancel=True)
        )
        return CHOOSE_ACC_FOR_RECEIPT
    
    try:
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥
        if pending_income:
            from app.storage import append_row_csv, inc_account
            from app.handlers.income import inc_balance_for_income
            
            income_data = pending_income.copy()
            income_data["payment_method"] = choice
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–æ—Ö–æ–¥
            append_row_csv(user_id, income_data, source="manual_income")
            
            # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç (–¥–æ—Ö–æ–¥)
            inc_balance_for_income(user_id, income_data["total"], income_data["currency"], income_data.get("category"))
            inc_account(user_id, choice, income_data["total"])
            
            success_text = (
                f"‚úÖ <b>–î–æ—Ö–æ–¥ —Å–æ—Ö—Ä–∞–Ω—ë–Ω!</b>\n\n"
                f"üìÖ {income_data['date']}\n"
                f"üìç {income_data['merchant']}\n"
                f"üí∞ –î–æ—Ö–æ–¥: {income_data['total']:.2f} {income_data['currency']}\n"
                f"üìÇ {income_data['category']}\n"
                f"üí≥ –°—á–µ—Ç: {choice}"
            )
            
            await msg.reply_text(success_text, parse_mode='HTML')
            context.user_data.pop("pending_income", None)
            
            from app.keyboards import reply_menu_keyboard
            await msg.reply_text(
                "‚úÖ –î–æ—Ö–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                reply_markup=reply_menu_keyboard(),
                parse_mode='HTML'
            )
            return -1
        
        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —á–µ–∫ (—Ä–∞—Å—Ö–æ–¥)
        elif pending_data:
            from app.storage import append_row_csv, dec_balance, dec_account
            
            receipt_data = pending_data["data"]
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –¥–∞–Ω–Ω—ã—Ö - –æ–±—ä–µ–∫—Ç –∏–ª–∏ —Å–ª–æ–≤–∞—Ä—å
            if hasattr(receipt_data, 'payment_method'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç (–∏–∑ enhanced photo) - –Ω–µ –∏–∑–º–µ–Ω—è–µ–º –æ–±—ä–µ–∫—Ç –Ω–∞–ø—Ä—è–º—É—é
                pass
            else:
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–∏–∑ voice)
                receipt_data["payment_method"] = choice
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Å—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            if hasattr(receipt_data, 'payment_method'):
                # –≠—Ç–æ –æ–±—ä–µ–∫—Ç (–∏–∑ enhanced photo)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
                items_list = []
                if receipt_data.items:
                    for item in receipt_data.items:
                        if item.name.strip():  # –¢–æ–ª—å–∫–æ —Ç–æ–≤–∞—Ä—ã —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º
                            items_list.append(f"{item.name} ({item.qty}x{item.price:.2f})")
                
                items_text = "; ".join(items_list) if items_list else ""
                notes_text = f"–§–æ—Ç–æ —á–µ–∫–∞: {receipt_data.merchant}"
                if items_text:
                    notes_text += f" | –¢–æ–≤–∞—Ä—ã: {items_text}"
                
                transaction_data = {
                    "date": receipt_data.date,
                    "merchant": receipt_data.merchant,
                    "total": receipt_data.total,
                    "currency": receipt_data.currency,
                    "category": receipt_data.category,
                    "payment_method": choice,  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç
                    "notes": notes_text
                }
            else:
                # –≠—Ç–æ —Å–ª–æ–≤–∞—Ä—å (–∏–∑ voice)
                transaction_data = receipt_data.copy()
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ CSV
            source = f"enhanced_photo:{pending_data.get('photo_id', '')}" if hasattr(receipt_data, 'payment_method') else f"voice:{pending_data.get('photo_id', '')}"
            append_row_csv(user_id, transaction_data, source=source)
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–ª–∞–Ω—Å—ã
            if hasattr(receipt_data, 'total'):
                # –û–±—ä–µ–∫—Ç
                total = receipt_data.total
                currency = receipt_data.currency
                category = receipt_data.category
            else:
                # –°–ª–æ–≤–∞—Ä—å
                total = receipt_data.get("total", 0)
                currency = receipt_data.get("currency", "")
                category = receipt_data.get("category", "")
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –¥–æ—Ö–æ–¥ —ç—Ç–æ –∏–ª–∏ —Ä–∞—Å—Ö–æ–¥
            if total > 0:
                # –î–æ—Ö–æ–¥ - —É–≤–µ–ª–∏—á–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç
                from app.handlers.income import inc_balance_for_income
                inc_balance_for_income(user_id, total, currency, category)
                from app.storage import inc_account
                inc_account(user_id, choice, total)
            else:
                # –†–∞—Å—Ö–æ–¥ - —É–º–µ–Ω—å—à–∞–µ–º –±–∞–ª–∞–Ω—Å –∏ —Å—á—ë—Ç
                dec_balance(user_id, total, currency, category)
                dec_account(user_id, choice, total)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            if total > 0:
                amount_display = f"üí∞ –î–æ—Ö–æ–¥: {total:.2f} {currency}"
            else:
                amount_display = f"üí∏ –†–∞—Å—Ö–æ–¥: {abs(total):.2f} {currency}"
                
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            if hasattr(receipt_data, 'date'):
                # –û–±—ä–µ–∫—Ç
                date_str = receipt_data.date
                merchant = receipt_data.merchant
                category = receipt_data.category
                items_count = len(receipt_data.items) if hasattr(receipt_data, 'items') else 0
            else:
                # –°–ª–æ–≤–∞—Ä—å
                date_str = receipt_data.get("date", "")
                merchant = receipt_data.get("merchant", "")
                category = receipt_data.get("category", "")
                items_count = 0
            
            success_text = (
                f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!</b>\n\n"
                f"üìÖ {date_str}\n"
                f"üè™ {merchant}\n"
                f"{amount_display}\n"
                f"üìÇ {category}\n"
                f"üí≥ –°—á–µ—Ç: {choice}"
            )
            
            if items_count > 0:
                success_text += f"\nüì¶ –¢–æ–≤–∞—Ä–æ–≤: {items_count}"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞—á–µ—Å—Ç–≤–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
            validation_result = pending_data.get("validation_result")
            if validation_result:
                confidence_emoji = "üü¢" if validation_result.confidence_score > 0.8 else "üü°" if validation_result.confidence_score > 0.5 else "üî¥"
                success_text += f"\n{confidence_emoji} –ö–∞—á–µ—Å—Ç–≤–æ: {validation_result.confidence_score:.0%}"
            
            await msg.reply_text(success_text, parse_mode='HTML')
            
            # –û–±—É—á–∞–µ–º —Å–∏—Å—Ç–µ–º—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±—ä–µ–∫—Ç–æ–≤)
            if hasattr(receipt_data, 'category'):
                categorizer = SmartCategorizationService(user_id)
                categorizer.learn_from_feedback(receipt_data, receipt_data.category)
            
            # –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            context.user_data.pop("pending_receipt", None)
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            from app.keyboards import reply_menu_keyboard
            await msg.reply_text(
                "‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!",
                reply_markup=reply_menu_keyboard(),
                parse_mode='HTML'
            )
            
            return -1
        
    except Exception as e:
        logger.error(f"Error saving transaction for user {user_id}: {e}")
        await msg.reply_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏: {e}", parse_mode='HTML')
        return CHOOSE_ACC_FOR_RECEIPT


async def show_receipt_analysis(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ–∫–∞"""
    pending_data = context.user_data.get("pending_receipt")
    if not pending_data:
        await update.effective_message.reply_text("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.", parse_mode='HTML')
        return
    
    receipt_data = pending_data["data"]
    parsing_result = pending_data.get("parsing_result")
    validation_result = pending_data.get("validation_result")
    category_suggestion = pending_data.get("category_suggestion")
    
    analysis_text = "üîç <b>–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —á–µ–∫–∞</b>\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä—Å–∏–Ω–≥–µ
    if parsing_result:
        analysis_text += f"ü§ñ <b>–ü–∞—Ä—Å–∏–Ω–≥:</b>\n"
        analysis_text += f"‚Ä¢ –¢–∏–ø —á–µ–∫–∞: {parsing_result.receipt_type.value}\n"
        analysis_text += f"‚Ä¢ –£—Å–ø–µ—Ö: {'‚úÖ' if parsing_result.success else '‚ùå'}\n"
        if parsing_result.errors:
            analysis_text += f"‚Ä¢ –û—à–∏–±–∫–∏: {', '.join(parsing_result.errors[:2])}\n"
        analysis_text += "\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if validation_result:
        analysis_text += f"‚úÖ <b>–í–∞–ª–∏–¥–∞—Ü–∏—è:</b>\n"
        analysis_text += f"‚Ä¢ –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å: {validation_result.confidence_score:.0%}\n"
        if validation_result.warnings:
            analysis_text += f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(validation_result.warnings)}\n"
        if validation_result.suggestions:
            analysis_text += f"‚Ä¢ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è: {len(validation_result.suggestions)}\n"
        analysis_text += "\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏–∏
    if category_suggestion:
        analysis_text += f"üìÇ <b>–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è:</b>\n"
        analysis_text += f"‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_suggestion.category}\n"
        analysis_text += f"‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {category_suggestion.confidence:.0%}\n"
        analysis_text += f"‚Ä¢ –ò—Å—Ç–æ—á–Ω–∏–∫: {category_suggestion.source}\n"
        analysis_text += f"‚Ä¢ –ü—Ä–∏—á–∏–Ω–∞: {category_suggestion.reason}\n"
    
    await update.effective_message.reply_text(analysis_text, parse_mode='HTML')


