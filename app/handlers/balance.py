# app/handlers/balance.py
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from app.constants import (
    BAL_MENU, ADD_ACC_NAME, ADD_ACC_CURRENCY, EDIT_PICK_ACC, EDIT_NEW_AMOUNT,
    EDIT_ACC_MENU, EDIT_ACC_CURRENCY, DELETE_ACC_CONFIRM
)
from app.keyboards import (
    balance_menu_kb, reply_menu_keyboard, accounts_kb, account_edit_menu_kb,
    currency_selection_kb, delete_confirmation_kb
)
from app.storage import (
    list_accounts, add_account, set_account_amount, format_accounts,
    delete_account, update_account_currency
)

from app.utils import get_user_id as _uid

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–æ—Å—Ç–æ—è–Ω–∏—è ¬´–ë–∞–ª–∞–Ω—Å¬ª

async def balance_menu_entry(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = """üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ:
‚Ä¢ üìä –ü—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤—Å–µ —Å—á–µ—Ç–∞
‚Ä¢ ‚ûï –î–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Å—á–µ—Ç–∞  
‚Ä¢ ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ
‚Ä¢ üóëÔ∏è –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Å—á–µ—Ç–∞
‚Ä¢ üí± –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"""
    
    await update.effective_message.reply_text(
        welcome_text, 
        reply_markup=balance_menu_kb(),
        parse_mode='HTML'
    )
    return BAL_MENU

async def bal_show_all(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text(
        format_accounts(_uid(update)),
        reply_markup=balance_menu_kb(),
        parse_mode='HTML'
    )
    return BAL_MENU

async def bal_add_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["new_acc"] = {}
    await update.effective_message.reply_text(
        "‚ûï <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —Å—á–µ—Ç–∞</b>\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞:\n"
        "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: Monobank, –ü—Ä–∏–≤–∞—Ç24, –ù–∞–ª–∏—á–Ω—ã–µ",
        parse_mode='HTML'
    )
    return ADD_ACC_NAME

async def bal_add_got_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.effective_message.text or "").strip()
    if not name:
        await update.effective_message.reply_text(
            "‚ùå –ü—É—Å—Ç–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ.\n\n–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞:",
            parse_mode='HTML'
        )
        return ADD_ACC_NAME
    context.user_data["new_acc"]["name"] = name
    await update.effective_message.reply_text(
        f"‚úÖ –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n\n"
        "üí± –í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å—á—ë—Ç–∞:\n"
        "üí° –ù–∞–ø—Ä–∏–º–µ—Ä: UAH, EUR, USD, RUB",
        parse_mode='HTML'
    )
    return ADD_ACC_CURRENCY

async def bal_add_got_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    cur = (update.effective_message.text or "").strip().upper()
    if not cur:
        await update.effective_message.reply_text(
            "‚ùå –ü—É—Å—Ç–∞—è –≤–∞–ª—é—Ç–∞.\n\n–í–≤–µ–¥–∏—Ç–µ –≤–∞–ª—é—Ç—É —Å—á—ë—Ç–∞:",
            parse_mode='HTML'
        )
        return ADD_ACC_CURRENCY
    name = context.user_data["new_acc"]["name"]
    try:
        add_account(_uid(update), name, cur, 0.0)
        await update.effective_message.reply_text(
            f"üéâ <b>–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</b>\n\n"
            f"üìù –ù–∞–∑–≤–∞–Ω–∏–µ: <b>{name}</b>\n"
            f"üí± –í–∞–ª—é—Ç–∞: <b>{cur}</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>0.00 {cur}</b>\n\n"
            f"üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ø–æ–ª–Ω–∏—Ç—å —Å—á—ë—Ç –∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã.",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
    except Exception as e:
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—á—ë—Ç–∞:</b>\n{e}",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
    return BAL_MENU

async def bal_edit_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    acc = list_accounts(_uid(update))
    if not acc:
        await update.effective_message.reply_text(
            "üìä <b>–°—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—á—ë—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–ª–∞–Ω—Å–æ–º.",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
        return BAL_MENU
    # –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Å—á—ë—Ç–∞
    await update.effective_message.reply_text(
        "‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=accounts_kb(list(acc.keys()), include_back=True),
        parse_mode='HTML'
    )
    return EDIT_PICK_ACC

async def bal_edit_pick(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = (update.effective_message.text or "").strip()
    if name == "–ù–∞–∑–∞–¥" or name == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text(
            "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
        return BAL_MENU

    acc = list_accounts(_uid(update))
    if name not in acc:
        await update.effective_message.reply_text(
            "–¢–∞–∫–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=accounts_kb(list(acc.keys()), include_back=True)
        )
        return EDIT_PICK_ACC

    context.user_data["edit_acc_name"] = name
    acc_info = acc[name]
    await update.effective_message.reply_text(
        f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞ ¬´{name}¬ª:\n"
        f"–¢–µ–∫—É—â–∞—è —Å—É–º–º–∞: {acc_info['amount']:.2f} {acc_info['currency']}\n\n"
        f"–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
        reply_markup=account_edit_menu_kb()
    )
    return EDIT_ACC_MENU

async def bal_edit_menu_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—á–µ—Ç–∞"""
    text = (update.effective_message.text or "").strip()
    name = context.user_data.get("edit_acc_name")
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        acc = list_accounts(_uid(update))
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=accounts_kb(list(acc.keys()), include_back=True)
        )
        return EDIT_PICK_ACC
    elif text == "üí∞ –°—É–º–º–∞":
        await update.effective_message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—É–º–º—É –¥–ª—è ¬´{name}¬ª (—á–∏—Å–ª–æ):"
        )
        return EDIT_NEW_AMOUNT
    elif text == "üí± –í–∞–ª—é—Ç–∞":
        await update.effective_message.reply_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è ¬´{name}¬ª:",
            reply_markup=currency_selection_kb()
        )
        return EDIT_ACC_CURRENCY
    else:
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:",
            reply_markup=account_edit_menu_kb()
        )
        return EDIT_ACC_MENU

async def bal_edit_new_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        amount = float(str((update.effective_message.text or "").strip()).replace(",", "."))
        name = context.user_data.get("edit_acc_name")
        _, acc = set_account_amount(_uid(update), name, amount)
        await update.effective_message.reply_text(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–±–Ω–æ–≤–ª–µ–Ω!</b>\n\n"
            f"üìù –°—á—ë—Ç: <b>{name}</b>\n"
            f"üí∞ –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: <b>{acc['amount']:,.2f} {acc['currency']}</b>",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
    except Exception as e:
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}\n\n"
            f"üí° –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ –µ—â—ë —Ä–∞–∑.",
            parse_mode='HTML'
        )
        return EDIT_NEW_AMOUNT
    return BAL_MENU

async def bal_edit_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤–∞–ª—é—Ç—ã —Å—á–µ—Ç–∞"""
    text = (update.effective_message.text or "").strip()
    name = context.user_data.get("edit_acc_name")
    
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text(
            f"–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—á—ë—Ç–∞ ¬´{name}¬ª:\n–ß—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?",
            reply_markup=account_edit_menu_kb()
        )
        return EDIT_ACC_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω–∞ –≤–∞–ª–∏–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞
    valid_currencies = ["UAH", "USD", "EUR", "RUB", "PLN", "GBP"]
    if text.upper() not in valid_currencies:
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö:",
            reply_markup=currency_selection_kb()
        )
        return EDIT_ACC_CURRENCY
    
    try:
        _, acc = update_account_currency(_uid(update), name, text.upper())
        await update.effective_message.reply_text(
            f"‚úÖ <b>–í–∞–ª—é—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìù –°—á—ë—Ç: <b>{name}</b>\n"
            f"üí± –ù–æ–≤–∞—è –≤–∞–ª—é—Ç–∞: <b>{acc['currency']}</b>\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: <b>{acc['amount']:,.2f} {acc['currency']}</b>",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
    except Exception as e:
        await update.effective_message.reply_text(
            f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}",
            parse_mode='HTML'
        )
        return EDIT_ACC_CURRENCY
    return BAL_MENU

async def bal_delete_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
    acc = list_accounts(_uid(update))
    if not acc:
        await update.effective_message.reply_text(
            "üìä <b>–°—á–µ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</b>\n\n"
            "üí° –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—á—ë—Ç, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–∞–ª–∞–Ω—Å–æ–º.",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
        return BAL_MENU
    
    await update.effective_message.reply_text(
        "üóëÔ∏è <b>–£–¥–∞–ª–µ–Ω–∏–µ —Å—á–µ—Ç–∞</b>\n\n"
        "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á—ë—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:",
        reply_markup=accounts_kb(list(acc.keys()), include_back=True),
        parse_mode='HTML'
    )
    return DELETE_ACC_CONFIRM

async def bal_delete_confirm(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text(
            "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
        return BAL_MENU
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —ç—Ç–æ –∫–Ω–æ–ø–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏–ª–∏ –≤—ã–±–æ—Ä —Å—á–µ—Ç–∞
    if text in ["‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", "‚ùå –û—Ç–º–µ–Ω–∞"]:
        return await bal_delete_execute(update, context)
    
    acc = list_accounts(_uid(update))
    if text not in acc:
        await update.effective_message.reply_text(
            "–¢–∞–∫–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=accounts_kb(list(acc.keys()), include_back=True)
        )
        return DELETE_ACC_CONFIRM
    
    context.user_data["delete_acc_name"] = text
    acc_info = acc[text]
    await update.effective_message.reply_text(
        f"‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç ¬´{text}¬ª?\n"
        f"–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: {acc_info['amount']:.2f} {acc_info['currency']}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=delete_confirmation_kb()
    )
    return DELETE_ACC_CONFIRM

async def bal_delete_execute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Å—á–µ—Ç–∞"""
    text = (update.effective_message.text or "").strip()
    name = context.user_data.get("delete_acc_name")
    
    if text == "‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å":
        try:
            delete_account(_uid(update), name)
            await update.effective_message.reply_text(
                f"üóëÔ∏è <b>–°—á—ë—Ç —É–¥–∞–ª–µ–Ω!</b>\n\n"
                f"üìù –£–¥–∞–ª–µ–Ω–Ω—ã–π —Å—á—ë—Ç: <b>{name}</b>\n\n"
                f"üí° –í—Å–µ –¥–∞–Ω–Ω—ã–µ –ø–æ —ç—Ç–æ–º—É —Å—á—ë—Ç—É –±—ã–ª–∏ —É–¥–∞–ª–µ–Ω—ã –±–µ–∑–≤–æ–∑–≤—Ä–∞—Ç–Ω–æ.",
                reply_markup=balance_menu_kb(),
                parse_mode='HTML'
            )
        except Exception as e:
            await update.effective_message.reply_text(
                f"‚ùå <b>–û—à–∏–±–∫–∞:</b> {e}",
                reply_markup=balance_menu_kb(),
                parse_mode='HTML'
            )
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text(
            "‚úÖ <b>–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ</b>\n\n"
            "üí° –°—á—ë—Ç –æ—Å—Ç–∞–ª—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
    else:
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=delete_confirmation_kb()
        )
        return DELETE_ACC_CONFIRM
    
    return BAL_MENU

async def bal_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.effective_message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=reply_menu_keyboard())
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§–∞–±—Ä–∏–∫–∞ ConversationHandler –¥–ª—è main.py

def build_balance_conv() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üíº –ë–∞–ª–∞–Ω—Å$"), balance_menu_entry),
        ],
        states={
            BAL_MENU: [
                MessageHandler(filters.Regex("^üíº –í—Å–µ —Å—á–µ—Ç–∞$"), bal_show_all),
                MessageHandler(filters.Regex("^‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å—á—ë—Ç$"), bal_add_start),
                MessageHandler(filters.Regex("^‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å$"), bal_edit_start),
                MessageHandler(filters.Regex("^üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Å—á—ë—Ç$"), bal_delete_start),
                MessageHandler(filters.Regex("^‚¨ÖÔ∏è –ù–∞–∑–∞–¥$"), bal_back),
            ],
            ADD_ACC_NAME: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_add_got_name),
            ],
            ADD_ACC_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_add_got_currency),
            ],
            EDIT_PICK_ACC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_edit_pick),
            ],
            EDIT_ACC_MENU: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_edit_menu_handler),
            ],
            EDIT_NEW_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_edit_new_amount),
            ],
            EDIT_ACC_CURRENCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_edit_currency),
            ],
            DELETE_ACC_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, bal_delete_confirm),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), bal_back)],
        allow_reentry=True,
    )
