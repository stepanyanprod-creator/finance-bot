# app/handlers/transfer.py
from telegram import Update
from telegram.ext import ContextTypes, ConversationHandler, MessageHandler, filters

from app.constants import (
    TRANSFER_FROM_ACC, TRANSFER_TO_ACC, TRANSFER_AMOUNT, 
    TRANSFER_SECOND_AMOUNT, TRANSFER_CONFIRM
)
from app.keyboards import (
    balance_menu_kb, accounts_kb, transfer_amount_kb, transfer_confirm_kb
)
from app.storage import (
    list_accounts, transfer_between_accounts, format_accounts
)
from app.utils import get_user_id as _uid

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –°–æ—Å—Ç–æ—è–Ω–∏—è ¬´–û–±–º–µ–Ω –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏¬ª

async def transfer_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏"""
    acc = list_accounts(_uid(update))
    if len(acc) < 2:
        await update.effective_message.reply_text(
            "‚ùå –î–ª—è –æ–±–º–µ–Ω–∞ –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –º–∏–Ω–∏–º—É–º 2 —Å—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –µ—â–µ –æ–¥–∏–Ω —Å—á–µ—Ç.",
            reply_markup=balance_menu_kb()
        )
        return ConversationHandler.END
    
    context.user_data["transfer"] = {}
    await update.effective_message.reply_text(
        "üí± –û–±–º–µ–Ω –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º):",
        reply_markup=accounts_kb(list(acc.keys()), include_back=True)
    )
    return TRANSFER_FROM_ACC

async def transfer_from_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å—á–µ—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text(
            "üíº <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–æ–º</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=balance_menu_kb(),
            parse_mode='HTML'
        )
        return ConversationHandler.END
    
    acc = list_accounts(_uid(update))
    if text not in acc:
        await update.effective_message.reply_text(
            "–¢–∞–∫–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=accounts_kb(list(acc.keys()), include_back=True)
        )
        return TRANSFER_FROM_ACC
    
    context.user_data["transfer"]["from_account"] = text
    from_acc = acc[text]
    
    # –ò—Å–∫–ª—é—á–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Å—á–µ—Ç –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
    to_accounts = [name for name in acc.keys() if name != text]
    
    await update.effective_message.reply_text(
        f"‚úÖ –°—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫: {text} ({from_acc['amount']:.2f} {from_acc['currency']})\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å (–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º):",
        reply_markup=accounts_kb(to_accounts, include_back=True)
    )
    return TRANSFER_TO_ACC

async def transfer_to_account(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–±–æ—Ä —Å—á–µ—Ç–∞-–ø–æ–ª—É—á–∞—Ç–µ–ª—è"""
    text = (update.effective_message.text or "").strip()
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        acc = list_accounts(_uid(update))
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç-–∏—Å—Ç–æ—á–Ω–∏–∫ (–æ—Ç–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º):",
            reply_markup=accounts_kb(list(acc.keys()), include_back=True)
        )
        return TRANSFER_FROM_ACC
    
    acc = list_accounts(_uid(update))
    from_account = context.user_data["transfer"]["from_account"]
    to_accounts = [name for name in acc.keys() if name != from_account]
    
    if text not in to_accounts:
        await update.effective_message.reply_text(
            "–¢–∞–∫–æ–≥–æ —Å—á—ë—Ç–∞ –Ω–µ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞:",
            reply_markup=accounts_kb(to_accounts, include_back=True)
        )
        return TRANSFER_TO_ACC
    
    context.user_data["transfer"]["to_account"] = text
    from_acc = acc[from_account]
    to_acc = acc[text]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—ã
    from_currency = from_acc["currency"]
    to_currency = to_acc["currency"]
    
    if from_currency == to_currency:
        # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã - –ø—Ä–æ—Å–∏–º –æ–¥–Ω—É —Å—É–º–º—É
        await update.effective_message.reply_text(
            f"‚úÖ –°—á–µ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {text} ({to_acc['amount']:.2f} {to_currency})\n\n"
            f"üí± –ü–µ—Ä–µ–≤–æ–¥: {from_account} ‚Üí {text}\n"
            f"üí∞ –í–∞–ª—é—Ç–∞: {from_currency}\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞:",
            reply_markup=transfer_amount_kb()
        )
    else:
        # –†–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã - –ø—Ä–æ—Å–∏–º —Å—É–º–º—É –¥–ª—è —Å—á–µ—Ç–∞-–∏—Å—Ç–æ—á–Ω–∏–∫–∞
        await update.effective_message.reply_text(
            f"‚úÖ –°—á–µ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å: {text} ({to_acc['amount']:.2f} {to_currency})\n\n"
            f"üí± –ü–µ—Ä–µ–≤–æ–¥: {from_account} ({from_currency}) ‚Üí {text} ({to_currency})\n\n"
            f"‚ö†Ô∏è –í–∞–ª—é—Ç—ã —Ä–∞–∑–Ω—ã–µ! –°–Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å ¬´{from_account}¬ª ({from_currency}):",
            reply_markup=transfer_amount_kb()
        )
    
    return TRANSFER_AMOUNT

async def transfer_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ —Å—É–º–º—ã –ø–µ—Ä–µ–≤–æ–¥–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        acc = list_accounts(_uid(update))
        from_account = context.user_data["transfer"]["from_account"]
        to_accounts = [name for name in acc.keys() if name != from_account]
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ —Å—á–µ—Ç-–ø–æ–ª—É—á–∞—Ç–µ–ª—å (–∫—É–¥–∞ –ø–µ—Ä–µ–≤–æ–¥–∏–º):",
            reply_markup=accounts_kb(to_accounts, include_back=True)
        )
        return TRANSFER_TO_ACC
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.effective_message.reply_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=balance_menu_kb())
        return ConversationHandler.END
    
    try:
        amount = float(str(text).replace(",", "."))
        if amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        context.user_data["transfer"]["amount"] = amount
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª—é—Ç—ã
        acc = list_accounts(_uid(update))
        from_account = context.user_data["transfer"]["from_account"]
        to_account = context.user_data["transfer"]["to_account"]
        
        from_currency = acc[from_account]["currency"]
        to_currency = acc[to_account]["currency"]
        
        if from_currency == to_currency:
            # –û–¥–∏–Ω–∞–∫–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã - –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é
            return await transfer_confirm_same_currency(update, context)
        else:
            # –†–∞–∑–Ω—ã–µ –≤–∞–ª—é—Ç—ã - –ø—Ä–æ—Å–∏–º –≤—Ç–æ—Ä—É—é —Å—É–º–º—É
            await update.effective_message.reply_text(
                f"‚úÖ –°—É–º–º–∞ –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è: {amount:.2f} {from_currency}\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è –∑–∞—á–∏—Å–ª–µ–Ω–∏—è –Ω–∞ ¬´{to_account}¬ª ({to_currency}):",
                reply_markup=transfer_amount_kb()
            )
            return TRANSFER_SECOND_AMOUNT
            
    except ValueError as e:
        await update.effective_message.reply_text(
            f"‚ùå {e}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
            reply_markup=transfer_amount_kb()
        )
        return TRANSFER_AMOUNT

async def transfer_second_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–≤–æ–¥ –≤—Ç–æ—Ä–æ–π —Å—É–º–º—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    text = (update.effective_message.text or "").strip()
    
    if text == "–ù–∞–∑–∞–¥" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        acc = list_accounts(_uid(update))
        from_account = context.user_data["transfer"]["from_account"]
        to_account = context.user_data["transfer"]["to_account"]
        from_currency = acc[from_account]["currency"]
        await update.effective_message.reply_text(
            f"–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –¥–ª—è —Å–ø–∏—Å–∞–Ω–∏—è —Å ¬´{from_account}¬ª ({from_currency}):",
            reply_markup=transfer_amount_kb()
        )
        return TRANSFER_AMOUNT
    
    if text == "‚ùå –û—Ç–º–µ–Ω–∞":
        await update.effective_message.reply_text("–û–±–º–µ–Ω –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=balance_menu_kb())
        return ConversationHandler.END
    
    try:
        second_amount = float(str(text).replace(",", "."))
        if second_amount <= 0:
            raise ValueError("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π")
        
        context.user_data["transfer"]["second_amount"] = second_amount
        return await transfer_confirm_different_currencies(update, context)
        
    except ValueError as e:
        await update.effective_message.reply_text(
            f"‚ùå {e}\n–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:",
            reply_markup=transfer_amount_kb()
        )
        return TRANSFER_SECOND_AMOUNT

async def transfer_confirm_same_currency(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è –æ–¥–∏–Ω–∞–∫–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
    transfer_data = context.user_data["transfer"]
    acc = list_accounts(_uid(update))
    
    from_account = transfer_data["from_account"]
    to_account = transfer_data["to_account"]
    amount = transfer_data["amount"]
    
    from_acc = acc[from_account]
    to_acc = acc[to_account]
    currency = from_acc["currency"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    if float(from_acc["amount"]) < amount:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ ¬´{from_account}¬ª.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {from_acc['amount']:.2f} {currency}\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {amount:.2f} {currency}",
            reply_markup=balance_menu_kb()
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    new_from_balance = float(from_acc["amount"]) - amount
    new_to_balance = float(to_acc["amount"]) + amount
    
    await update.effective_message.reply_text(
        f"üí± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n"
        f"üì§ –°–ø–∏—Å—ã–≤–∞–µ–º —Å ¬´{from_account}¬ª: {amount:.2f} {currency}\n"
        f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_from_balance:.2f} {currency}\n\n"
        f"üì• –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞ ¬´{to_account}¬ª: {amount:.2f} {currency}\n"
        f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_to_balance:.2f} {currency}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?",
        reply_markup=transfer_confirm_kb()
    )
    return TRANSFER_CONFIRM

async def transfer_confirm_different_currencies(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    transfer_data = context.user_data["transfer"]
    acc = list_accounts(_uid(update))
    
    from_account = transfer_data["from_account"]
    to_account = transfer_data["to_account"]
    amount = transfer_data["amount"]
    second_amount = transfer_data["second_amount"]
    
    from_acc = acc[from_account]
    to_acc = acc[to_account]
    from_currency = from_acc["currency"]
    to_currency = to_acc["currency"]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ—Å—Ç—å —Å—Ä–µ–¥—Å—Ç–≤
    if float(from_acc["amount"]) < amount:
        await update.effective_message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–∞ —Å—á–µ—Ç–µ ¬´{from_account}¬ª.\n"
            f"–î–æ—Å—Ç—É–ø–Ω–æ: {from_acc['amount']:.2f} {from_currency}\n"
            f"–¢—Ä–µ–±—É–µ—Ç—Å—è: {amount:.2f} {from_currency}",
            reply_markup=balance_menu_kb()
        )
        return ConversationHandler.END
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    new_from_balance = float(from_acc["amount"]) - amount
    new_to_balance = float(to_acc["amount"]) + second_amount
    
    await update.effective_message.reply_text(
        f"üí± –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞:\n\n"
        f"üì§ –°–ø–∏—Å—ã–≤–∞–µ–º —Å ¬´{from_account}¬ª: {amount:.2f} {from_currency}\n"
        f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_from_balance:.2f} {from_currency}\n\n"
        f"üì• –ó–∞—á–∏—Å–ª—è–µ–º –Ω–∞ ¬´{to_account}¬ª: {second_amount:.2f} {to_currency}\n"
        f"   –ë–∞–ª–∞–Ω—Å –ø–æ—Å–ª–µ: {new_to_balance:.2f} {to_currency}\n\n"
        f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–≤–æ–¥?",
        reply_markup=transfer_confirm_kb()
    )
    return TRANSFER_CONFIRM

async def transfer_execute(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–≤–æ–¥–∞"""
    text = (update.effective_message.text or "").strip()
    
    if text == "‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        try:
            transfer_data = context.user_data["transfer"]
            from_account = transfer_data["from_account"]
            to_account = transfer_data["to_account"]
            amount = transfer_data["amount"]
            second_amount = transfer_data.get("second_amount")
            
            result = transfer_between_accounts(
                _uid(update), from_account, to_account, amount, second_amount
            )
            
            await update.effective_message.reply_text(
                f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ!\n\n"
                f"üì§ –°–ø–∏—Å–∞–ª–∏ —Å ¬´{result['from_account']}¬ª: {result['from_amount']:.2f} {result['from_currency']}\n"
                f"üì• –ó–∞—á–∏—Å–ª–∏–ª–∏ –Ω–∞ ¬´{result['to_account']}¬ª: {result['to_amount']:.2f} {result['to_currency']}",
                reply_markup=balance_menu_kb()
            )
            
        except Exception as e:
            await update.effective_message.reply_text(
                f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}",
                reply_markup=balance_menu_kb()
            )
    
    elif text == "‚ùå –û—Ç–º–µ–Ω–∞" or text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        await update.effective_message.reply_text("–ü–µ—Ä–µ–≤–æ–¥ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=balance_menu_kb())
    
    else:
        await update.effective_message.reply_text(
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=transfer_confirm_kb()
        )
        return TRANSFER_CONFIRM
    
    return ConversationHandler.END

async def transfer_back(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await update.effective_message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=balance_menu_kb())
    return ConversationHandler.END

# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# –§–∞–±—Ä–∏–∫–∞ ConversationHandler –¥–ª—è main.py

def build_transfer_conv() -> ConversationHandler:
    return ConversationHandler(
        entry_points=[
            MessageHandler(filters.Regex("^üí± –û–±–º–µ–Ω –º–µ–∂–¥—É —Å—á–µ—Ç–∞–º–∏$"), transfer_start),
        ],
        states={
            TRANSFER_FROM_ACC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_from_account),
            ],
            TRANSFER_TO_ACC: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_to_account),
            ],
            TRANSFER_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_amount),
            ],
            TRANSFER_SECOND_AMOUNT: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_second_amount),
            ],
            TRANSFER_CONFIRM: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, transfer_execute),
            ],
        },
        fallbacks=[MessageHandler(filters.Regex("^–ù–∞–∑–∞–¥$"), transfer_back)],
        allow_reentry=True,
    )
