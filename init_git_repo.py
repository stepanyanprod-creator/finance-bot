#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –Ω–∞ Render
"""

import subprocess
import os
import sys
from pathlib import Path
import logging

logger = logging.getLogger(__name__)

def init_git_repository():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏"""
    try:
        print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
        if Path('.git').exists():
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        else:
            print("üìÅ –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
            subprocess.run(['git', 'init'], check=True)
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —Å–æ–∑–¥–∞–Ω")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º git
        print("‚öôÔ∏è –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é git...")
        subprocess.run(['git', 'config', 'user.name', 'Finance Bot'], check=True)
        subprocess.run(['git', 'config', 'user.email', 'bot@finance.local'], check=True)
        subprocess.run(['git', 'config', 'pull.rebase', 'false'], check=True)
        subprocess.run(['git', 'config', 'credential.helper', 'store'], check=True)
        print("‚úÖ Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
        
        # –î–æ–±–∞–≤–ª—è–µ–º remote origin
        print("üîó –ù–∞—Å—Ç—Ä–∞–∏–≤–∞—é remote origin...")
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ origin
            result = subprocess.run(['git', 'remote', 'get-url', 'origin'], 
                                  capture_output=True, text=True)
            if result.returncode != 0:
                # –î–æ–±–∞–≤–ª—è–µ–º origin
                github_url = "https://github.com/stepanyanprod-creator/finance-bot.git"
                subprocess.run(['git', 'remote', 'add', 'origin', github_url], check=True)
                print(f"‚úÖ Remote origin –¥–æ–±–∞–≤–ª–µ–Ω: {github_url}")
            else:
                print(f"‚úÖ Remote origin —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {result.stdout.strip()}")
        except subprocess.CalledProcessError as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ remote: {e}")
            return False
        
        # –°–æ–∑–¥–∞–µ–º .gitignore –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        gitignore_content = """# –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–±—É–¥—É—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å—Å—è)
# data/

# –õ–æ–≥–∏
*.log
logs/

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
*.tmp
*.temp

# Python
__pycache__/
*.pyc
*.pyo
*.pyd
.Python
env/
venv/
.venv/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# –†–µ–∑–µ—Ä–≤–Ω—ã–µ –∫–æ–ø–∏–∏ (–∫—Ä–æ–º–µ –≤–∞–∂–Ω—ã—Ö)
backups/
!backups/.gitkeep
"""
        
        if not Path('.gitignore').exists():
            with open('.gitignore', 'w', encoding='utf-8') as f:
                f.write(gitignore_content)
            print("‚úÖ –°–æ–∑–¥–∞–Ω .gitignore")
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É data –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        data_dir = Path('data')
        data_dir.mkdir(exist_ok=True)
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª .gitkeep –≤ data
        (data_dir / '.gitkeep').touch()
        print("‚úÖ –ü–∞–ø–∫–∞ data —Å–æ–∑–¥–∞–Ω–∞")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã
        print("üì¶ –î–æ–±–∞–≤–ª—è—é —Ñ–∞–π–ª—ã –≤ git...")
        subprocess.run(['git', 'add', '.'], check=True)
        
        # –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç
        try:
            subprocess.run(['git', 'commit', '-m', 'Initial commit with data structure'], check=True)
            print("‚úÖ –ü–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç —Å–æ–∑–¥–∞–Ω")
        except subprocess.CalledProcessError:
            print("‚ÑπÔ∏è –ö–æ–º–º–∏—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π")
        
        print("üéâ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ git: {e}")
        return False

def test_git_connection():
    """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ GitHub"""
    try:
        print("üß™ –¢–µ—Å—Ç–∏—Ä—É—é –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º remote
        result = subprocess.run(['git', 'remote', '-v'], capture_output=True, text=True)
        if result.returncode == 0:
            print(f"üì° Remote repositories:")
            print(result.stdout)
        else:
            print("‚ùå Remote repositories –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            return False
        
        # –ü—ã—Ç–∞–µ–º—Å—è fetch
        print("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é fetch...")
        fetch_result = subprocess.run(['git', 'fetch', 'origin'], 
                                    capture_output=True, text=True, timeout=30)
        
        if fetch_result.returncode == 0:
            print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub —Ä–∞–±–æ—Ç–∞–µ—Ç")
            return True
        else:
            print(f"‚ùå –û—à–∏–±–∫–∞ fetch: {fetch_result.stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False

if __name__ == "__main__":
    print("üöÄ –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø GIT –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø –î–õ–Ø –°–ò–ù–•–†–û–ù–ò–ó–ê–¶–ò–ò")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
    if init_git_repository():
        print("\n" + "=" * 60)
        print("üß™ –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø")
        print("=" * 60)
        
        # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if test_git_connection():
            print("\nüéâ –í–°–ï –ì–û–¢–û–í–û! –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å GitHub –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞!")
        else:
            print("\n‚ö†Ô∏è Git –Ω–∞—Å—Ç—Ä–æ–µ–Ω, –Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ GitHub –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç")
            print("üí° –í–æ–∑–º–æ–∂–Ω–æ, –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ —Ç–æ–∫–µ–Ω –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π")
        sys.exit(1)
