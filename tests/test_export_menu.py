# tests/test_export_menu.py
"""–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""

import pytest
from unittest.mock import patch, MagicMock
from datetime import date

from app.handlers.export import (
    export_menu_entry, export_menu_router, export_monthly_menu_router,
    parse_month_selection
)


class TestExportMenu:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    
    def test_parse_month_selection_current_month(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞"""
        today = date.today()
        month_names = [
            "–Ø–Ω–≤–∞—Ä—å", "–§–µ–≤—Ä–∞–ª—å", "–ú–∞—Ä—Ç", "–ê–ø—Ä–µ–ª—å", "–ú–∞–π", "–ò—é–Ω—å",
            "–ò—é–ª—å", "–ê–≤–≥—É—Å—Ç", "–°–µ–Ω—Ç—è–±—Ä—å", "–û–∫—Ç—è–±—Ä—å", "–ù–æ—è–±—Ä—å", "–î–µ–∫–∞–±—Ä—å"
        ]
        current_month_text = f"{month_names[today.month - 1]} {today.year}"
        
        year, month = parse_month_selection(current_month_text)
        
        assert year == today.year
        assert month == today.month
    
    def test_parse_month_selection_specific_month(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
        year, month = parse_month_selection("–ú–∞—Ä—Ç 2024")
        
        assert year == 2024
        assert month == 3
    
    def test_parse_month_selection_invalid(self):
        """–¢–µ—Å—Ç –ø–∞—Ä—Å–∏–Ω–≥–∞ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞"""
        year, month = parse_month_selection("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç")
        
        assert year is None
        assert month is None
    
    @patch('app.handlers.export.export_csv_command')
    async def test_export_menu_router_simple_csv(self, mock_export_csv):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –ø—Ä–æ—Å—Ç–æ–≥–æ CSV —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        update.effective_message.text = "üìÑ –ü—Ä–æ—Å—Ç–æ–π CSV"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await export_menu_router(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        mock_export_csv.assert_called_once_with(update, context)
        assert result == -1  # ConversationHandler.END
    
    @patch('app.handlers.export.export_balances_command')
    async def test_export_menu_router_balances(self, mock_export_balances):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        update.effective_message.text = "üíº –ë–∞–ª–∞–Ω—Å—ã"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await export_menu_router(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞ –±–∞–ª–∞–Ω—Å–æ–≤
        mock_export_balances.assert_called_once_with(update, context)
        assert result == -1  # ConversationHandler.END
    
    @patch('app.handlers.export.export_menu_entry')
    async def test_export_menu_router_back(self, mock_export_menu):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        update.effective_message.text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await export_menu_router(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        mock_export_menu.assert_called_once_with(update, context)
        assert result == 500  # EXPORT_MENU
    
    @patch('app.handlers.export.export_specific_month')
    async def test_export_monthly_menu_router_valid_month(self, mock_export_month):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ –≤–∞–ª–∏–¥–Ω–æ–≥–æ –º–µ—Å—è—Ü–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        update.effective_message.text = "–ú–∞—Ä—Ç 2024"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await export_monthly_menu_router(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω —ç–∫—Å–ø–æ—Ä—Ç –º–µ—Å—è—Ü–∞
        mock_export_month.assert_called_once_with(update, context, 2024, 3)
        assert result == -1  # ConversationHandler.END
    
    @patch('app.handlers.export.export_menu_entry')
    async def test_export_monthly_menu_router_back(self, mock_export_menu):
        """–¢–µ—Å—Ç –≤–æ–∑–≤—Ä–∞—Ç–∞ –∏–∑ –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
        # –°–æ–∑–¥–∞–µ–º –º–æ–∫ –æ–±—ä–µ–∫—Ç—ã
        update = MagicMock()
        context = MagicMock()
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–∫
        update.effective_message.text = "‚¨ÖÔ∏è –ù–∞–∑–∞–¥"
        
        # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        result = await export_monthly_menu_router(update, context)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±—ã–ª –≤—ã–∑–≤–∞–Ω –≤–æ–∑–≤—Ä–∞—Ç –≤ –º–µ–Ω—é
        mock_export_menu.assert_called_once_with(update, context)
        assert result == 500  # EXPORT_MENU


def test_export_menu_keyboard_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –º–µ–Ω—é —ç–∫—Å–ø–æ—Ä—Ç–∞"""
    from app.keyboards import export_menu_kb
    
    keyboard = export_menu_kb()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert keyboard is not None
    assert hasattr(keyboard, 'keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
    keyboard_text = str(keyboard.keyboard)
    assert "üìÑ –ü—Ä–æ—Å—Ç–æ–π CSV" in keyboard_text
    assert "üìä –ü–æ –º–µ—Å—è—Ü–∞–º" in keyboard_text
    assert "üìÖ –¢–µ–∫—É—â–∏–π –º–µ—Å—è—Ü" in keyboard_text
    assert "üìÜ –ü–æ—Å–ª–µ–¥–Ω–∏–µ 3 –º–µ—Å—è—Ü–∞" in keyboard_text
    assert "üíº –ë–∞–ª–∞–Ω—Å—ã" in keyboard_text
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" in keyboard_text


def test_export_monthly_menu_keyboard_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –≤—ã–±–æ—Ä–∞ –º–µ—Å—è—Ü–∞"""
    from app.keyboards import export_monthly_menu_kb
    
    keyboard = export_monthly_menu_kb()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ–∑–¥–∞–Ω–∞
    assert keyboard is not None
    assert hasattr(keyboard, 'keyboard')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    keyboard_text = str(keyboard.keyboard)
    assert "‚¨ÖÔ∏è –ù–∞–∑–∞–¥" in keyboard_text
