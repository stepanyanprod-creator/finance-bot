#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è Finance Bot

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  python3 restart_bot.py           - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
  python3 restart_bot.py start     - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  python3 restart_bot.py stop      - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞
  python3 restart_bot.py restart   - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞
  python3 restart_bot.py status    - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞
  python3 restart_bot.py monitor   - –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±–æ—Ç–∞

–°–∫—Ä–∏–ø—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –¥–∞–∂–µ –∫–æ–≥–¥–∞ –±–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω.
"""
import sys
import os
import subprocess
import time
import signal

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ Python path
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

def check_running_processes():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞–ø—É—â–µ–Ω—ã –ª–∏ —É–∂–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º pgrep –¥–ª—è –±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤
        result = subprocess.run(['pgrep', '-f', 'main.py'], capture_output=True, text=True)
        if result.returncode == 0 and result.stdout.strip():
            pids = [pid.strip() for pid in result.stdout.strip().split('\n') if pid.strip()]
            return pids
        return []
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {e}")
        return []

def stop_bot_processes():
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞"""
    print("üîç –ò—â—É –∑–∞–ø—É—â–µ–Ω–Ω—ã–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞...")
    
    existing_pids = check_running_processes()
    
    if not existing_pids:
        print("‚úÖ –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤ –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
        return True
    
    print(f"‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {len(existing_pids)} –ø—Ä–æ—Ü–µ—Å—Å–æ–≤: {existing_pids}")
    
    # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å—ã
    for pid in existing_pids:
        try:
            print(f"üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é –ø—Ä–æ—Ü–µ—Å—Å {pid}...")
            
            # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –º—è–≥–∫–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å
            try:
                subprocess.run(['kill', '-TERM', pid], check=True, timeout=5)
            except subprocess.TimeoutExpired:
                print(f"‚ö†Ô∏è  –ü—Ä–æ—Ü–µ—Å—Å {pid} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ SIGTERM")
            except subprocess.CalledProcessError:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å SIGTERM –ø—Ä–æ—Ü–µ—Å—Å—É {pid}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ
            time.sleep(2)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            try:
                check_result = subprocess.run(['ps', '-p', pid], capture_output=True, timeout=5)
                if check_result.returncode == 0:
                    print(f"‚ö° –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∞—é –ø—Ä–æ—Ü–µ—Å—Å {pid}...")
                    subprocess.run(['kill', '-KILL', pid], check=True, timeout=5)
                    time.sleep(1)
            except (subprocess.CalledProcessError, subprocess.TimeoutExpired):
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ—Ü–µ—Å—Å {pid}")
            
            print(f"‚úÖ –ü—Ä–æ—Ü–µ—Å—Å {pid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø—Ä–æ—Ü–µ—Å—Å–∞ {pid}: {e}")
            continue
    
    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    time.sleep(3)
    remaining_pids = check_running_processes()
    
    if remaining_pids:
        print(f"‚ö†Ô∏è  –û—Å—Ç–∞–ª–∏—Å—å –ø—Ä–æ—Ü–µ—Å—Å—ã: {remaining_pids}")
        return False
    else:
        print("‚úÖ –í—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã –±–æ—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True

def start_bot():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
        process = subprocess.Popen([sys.executable, 'main.py'], 
                                 stdout=subprocess.PIPE, 
                                 stderr=subprocess.STDOUT, 
                                 universal_newlines=True,
                                 bufsize=1)
        
        # –î–∞–µ–º –±–æ—Ç—É –≤—Ä–µ–º—è –Ω–∞ –∑–∞–ø—É—Å–∫
        time.sleep(3)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ—Ü–µ—Å—Å –∑–∞–ø—É—Å—Ç–∏–ª—Å—è
        if process.poll() is None:
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ")
            print(f"üìã PID –ø—Ä–æ—Ü–µ—Å—Å–∞: {process.pid}")
            print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –±–æ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Ctrl+C –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É kill")
            return True
        else:
            print(f"‚ùå –ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –∫–æ–¥–æ–º –æ—à–∏–±–∫–∏: {process.returncode}")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        return False

def monitor_bot():
    """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞"""
    print("üëÄ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±–æ—Ç–∞...")
    print("üí° –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
    
    try:
        while True:
            pids = check_running_processes()
            if pids:
                print(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {', '.join(pids)})")
            else:
                print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            
            time.sleep(10)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
            
    except KeyboardInterrupt:
        print("\nüëã –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

def restart_bot():
    """–ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞"""
    print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ Finance Bot...")
    print("=" * 50)
    
    # –®–∞–≥ 1: –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ—Ü–µ—Å—Å—ã
    print("üìã –®–∞–≥ 1: –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –ø—Ä–æ—Ü–µ—Å—Å–æ–≤")
    if not stop_bot_processes():
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ –ø—Ä–æ—Ü–µ—Å—Å—ã. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω.")
        return False
    
    print()
    
    # –®–∞–≥ 2: –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    print("üìã –®–∞–≥ 2: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–π...")
    time.sleep(3)
    
    print()
    
    # –®–∞–≥ 3: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("üìã –®–∞–≥ 3: –ó–∞–ø—É—Å–∫ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞")
    return start_bot()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤
    def signal_handler(signum, frame):
        print(f"\nüëã –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª {signum}. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
        sys.exit(0)
    
    signal.signal(signal.SIGINT, signal_handler)
    signal.signal(signal.SIGTERM, signal_handler)
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    if len(sys.argv) > 1:
        command = sys.argv[1].lower()
        
        if command == "start":
            print("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            return start_bot()
        elif command == "stop":
            print("üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞...")
            return stop_bot_processes()
        elif command == "restart":
            print("üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
            return restart_bot()
        elif command == "status":
            print("üìä –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:")
            pids = check_running_processes()
            if pids:
                print(f"‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç (PID: {', '.join(pids)})")
            else:
                print("‚ùå –ë–æ—Ç –Ω–µ –∑–∞–ø—É—â–µ–Ω")
            return True
        elif command == "monitor":
            monitor_bot()
            return True
        else:
            print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
            print("  start    - –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            print("  stop     - –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞")
            print("  restart  - –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞")
            print("  status   - –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞")
            print("  monitor  - –º–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –±–æ—Ç–∞")
            return False
    
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫
    try:
        success = restart_bot()
        if success:
            print("\n‚úÖ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        else:
            print("\n‚ùå –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω —Å –æ—à–∏–±–∫–∞–º–∏")
        return success
    except KeyboardInterrupt:
        print("\nüëã –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
